#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 28 09:13:11 2022

@author: brian
"""

import pandas as pd
import numpy as np

def get_codon_table(dna=False):
    dfcodon = pd.read_csv('/Users/brian/Documents/python/Coursera-Bioinfomatics/Part2/RNA_codon_table_1.txt',
                      sep=' ',index_col=0,header=0).squeeze("columns")
    dfcodon = dfcodon.fillna('')
    
    if dna == True:
        conversion = {'A':'A','C':'C','G':'G','U':'T'}
        idx = dfcodon.index
        newidx = []
        for i in idx:
            newcodon = []
            for j in i:
                newcodon.append(conversion[j])
            newidx.append(''.join(newcodon))
        dfcodon.index = newidx
    
    return dfcodon

def dna_to_rna(dna_seq):
    conversion = {'A':'A','C':'C','G':'G','T':'U'}
    return ''.join([conversion[i] for i in dna_seq])

def rna_to_dna(rna_seq):
    conversion = {'A':'A','C':'C','G':'G','U':'T'}
    return ''.join([conversion[i] for i in rna_seq])


def RNA_to_prot(sequence_rna):
    dfcodon = get_codon_table()
    
    length = len(sequence_rna)
    length_prot = int(length/3)
    if length % 3 != 0:
        print('error: not working')
        return -1
    
    
    sequence_prot = []
    
    for i in range(length_prot):
        rna_3mer = sequence_rna[3*i:3*i+3]
        prot_res = dfcodon[rna_3mer]
        #print(rna_3mer,prot_res)
        sequence_prot.append(prot_res)
    
    return ''.join(sequence_prot)


RNA_to_prot('AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA')
RNA_to_prot("AUGCUACAUGGACUCAUUCACUCUAGCUUUUUGCUCCAGAGUAUGUAUUAUCUAAGGCCUGCACUGUCGACCUUUGCAGAAACCGCCACGAUGAGACUGGGAAGACAUGAAGGCCAUGUUGCCAUGCUUAGCUUUUUGGACCACCCAGCCGGCUGCAAACGCGCCUGGAAGUUCCCGAUUAGUCCAGAGUUGACUCGGAUACGUCCCCUGGUCGCUUAUGGAAAUUGCACGUAUCGAGAUGCAAACGCAGUCUUUACGUCGGAGCAAUGCGCCUUUCUUGCUUUUGGUUGCCUUCGGGAAAUUAGCAUGCUUAAAGUACAACUCAACGUCAGCAAAGCAAAACGUGCCCAUCGUAUUCACGAAUCACCGCUUACUCAUAUUCAAACAGGGCUACACCAUCGGGUCACACACACGGCCGGUGACGGGGUUCCUGUGGGGAUGAUCUGGAAACCCACGGGACUAAUCCAGUACUGCAUCGCGUCCGGAGACUACGGGGAGGUAGAAUGGUACGGCCUGGAGUGUCGUUGGAGCUUCGGUUGUCUCUUAGCUGGUAGGAUUCGUUCCAGCCCCGACGAGCACCAUGUGCAAGAUCUUGUAAGAAGGUCUAGAGCCAGACCCACACGGGAAGAAUUCAUGCGCAAUAGCGCGGGGAGACCCGUUGUACUACAAUUCGGUAACAAUGCCAUUCGGAUCAGAAAAUCUCUUUGCACGACCAGUCUUUGCUUGGGAACAAAUAGCUCCGUAAGCGGAAAAUGUAUCUACAACUCGUUCCUGAUGUGUUGGCGGGCGGCUGAGGUGAUAAUUGAUCGAACGAGAAUCCGCGAGAAUCGACCUGGACAGAGUAACACUCUUCCAAACUGGGACUGCGGAACCACUAGGCCCCCCUCCAAACACGAGGAAUGUGAUGGCGUUCUAAAAGAGUCGCAUAAGCUAUCCGCGACGUGUCCGAUACAUCUAAGAUUGGCUUGCAUCCUCGGCAAAGGGACGAUUAUCCUGUACUUCUCGUCGCUACAGAUAGGAUCGCGUACAAAAUCGCAUGAGAUGUACGGACAUCCGCUUUGCAACCUGCAAGUAUGUGGCAGUAAUAGUGGCGUGACGCGAAUAGUGGUGUACAACGGGCGAUUGUAUCCAUUUCACGCAACUAAUGGAACAUUCCAUCAUUGCGCACCUAUCCAGGUCAGUGCGCCCCCCGUGCUAUGCUGGAUACACCGUUGUACACUCACACUACCUUCAUCAGUAUGCAUAGUAUGCUUAUGCGUGCCGAGGACUCCGGACGGAGGCCGUGCGCUAGCUAGAUUCACCAAGUGGGAGUUGACCGGGAAGUCAUGCCUGGUUAUAUGUUGGUACCACUUCACAGCGACGCUAAACGCCAAGUUGGUAUCGCCAAAGUCGCCGGCUGGACCUUUCGUAGAUGCAAACAACCAAUGCGGUAUUGGACAGGCGCAAUGCAAUCAGUUCCCGAGUCACUUCAUCUUCUCGACUACGUUUACUCCGAAGUAUCCAGGCGCAUUGGUGAGGCUCGUUCACUUGACUGCAAGAAAAAGUCAAGCAAUGCUAUGGGGGGUCAUGUGUUGGAGAAUAUUUAAAAACCCACCCGAGAAGCAGAAGGGUGCCAAUGCGCUUGUUGCGCACUCGAGUAUGACCUCCGCAAGUUCACGGAGUAGGACUACGUAUACGUGCAAGUCGUGGGGAUGUGAUUUUCCGACACUAUAUUUUGUUAGGACUUCCGUUCACAUACCGGCAGCGAACAUUGGAAUACCAUACGUUGUAAGUAUCCUCAGUCGAGUACACCUCACUCUUAUAUUAAUGGAAAGUGGAGUCCACCCUGACGAGAUCCCUGUACGUUCGGGUGAGCCAGUCGGCUGGUAUACUAUUCCAAUCUGUGGGGCAUCGACCGAGAUUUGGUCCAGUGACAGGUGCGUCCACACCGAUGAGAACACUUCCGGAAGCACAUCGACAAGUGGGAUUGUCUUAUACAAUCUGCAAGUGUUGGCCCUGCAAGCCGAGACCGCUACGGGGCGGUCAUAUAUAAAGUCUGGUUCAGUCUUACAGAUCAAGGGAGCCGGGGACCAGCACUUCGAACCCCUCGAGCACUGCUGUGAAUGUGCCACUCAUCCAGCCAGUUGUGACAGAAGAUUGUCCCUCGGUUCAUUCUGUAAUUGGCAGCCCCCGACUACACGGUUCUUUGCGUUAAUCUGGUUCUUCUCGUGGACGCACUGUGUCACGUUUUUAGCGGAGCCACAUCAUGGCUCUGUUUAUUCCUCAUGCCGUUCCGUGGCUGUUCCCCCACAAAAUAGCCACUUGCGUUGUAGGUCACAUACGAUAAAGUCAGAUCCUUACGUAGACCAUGGGUCGGACACAUGUCACCUCCGAUUAUUUCUUCCGGGAGUCAUUAUUCUCGGAGUUGAGUUCACGACUAUACGGCCUAGCGAUGGAGGCCCACUUUACGCUACUCAAUUUUCGCUUGGACGCCGGAGUGUAAUUAAGAGGACGCCAGUGAUGAUACAGCUGCUGUCGAAUAGUGAUUCAGGAAUUUGCCAUACUAGAGGAGAGCGGCUUCCUCGUAAAAACUCUACUGGCGCACGCCCGAAGGCUCAUGCGUCGACAGGACCUCUACUGCUCGCCCCAGUGCCGAUGGAGGCACGAGUGAGAACUGUGGAUAAUCAGGUUUCAAUCACUGUUAUACCUGGUCGUCCAAAGGCUGAACUGUGGAAACGGUUCCUAUCGGUGUGGAUGGAGAACUGGAUUACAGAUCAUUCCUUCACUUGGUAUCAUGUAGUGUCAGCGCCAGACAUAGUCAGUGGGAUCGUGCGCUCUCGUGAGUCACCGAUCGGUCCGCGUACGGUAAGGGGUAAUUUCAACGGUCCAGAUGGCGCCUGCAUCAGUCGACUGUCCGCUAGGGAUUUUAAGCCGUCAAACGAGUGGUCGUUCUCAGGCGUAGUUGUACCCGGGAAUAUUGGUUGUAGUAUAGGAUCUUGUUAUAUCCUGCGGUGUUCCGGGGUAGUGCAUCGGGGGAAACUAAACCGAGGGCAGCAACAACGAAGACAUAGUGUCCGGGCUUUUCGAGCUUGUGAGCGCCGACUAGAAUGCUCUAAUUAUGCCGUCCGUAAUGUGACGUGUAACCUCCGACUCGUGAGGCUAACAUCAGGAGAGGACGGCCGUAAACAGAGUAUUCCUGCUACCUUCCGAUUUACAGCGCCUAGCGUGGGAUACGUUGGCUCCCGGCGGCGACAAGUAACAGUGUGGGUCUUAGAUCAGUGUUGUUGUCGAAACAAGAGUGCUAGCCAAGGUCUUAUACAGUCAUUAUAUGAUGUAGAUCUACCAGUCCAAAAUGCGCGUAACUCAGUAGUGUGGGACCUGGACUGCUGGGCGACCACCAUAACAGAGUCUUCAGCUAGGUGUGCGAAUAGCCGAUACGGGUUCACGCUCCACCGCUAUUAUGCGAAGUGUGCUACGGGUCUUCCUUUGACGCCAUAUACUACGCGAAGACGUUCUUUCGGUCGUACUGGGCAUACAUUGGACGAGCAACGACGAACGACCGGUUAUGGUCCGAUGCCUAGUCCCGGAGAGCUCUAUAUAACCCAAUCAGGGAGCUCUCGGAGUUGUACUCAGGUCCGUGUUGCGUAUUUGCUUGUGUUAUGGCUUAUGCGAGCUUCCAUCGUAGAAGGAUUUGAUGAGGAGACCUCCCAACCCACCUUGCACAUCUUAUACGCCGUUUGCUUCGUGUGGGUAUGGGUCUUGGGCACCGUGAUAUGGUUAAACCAGAGCUCGCUAGACCAUUCCUACCGAUCUCUGCCCUGCCGUACGAGCAAGUGGGAACUAGGUAUAACCAUGCCUCCAGUACUGAGUAAUUCAAAACUGGUCUCGUGCGGACACUUGGAGAUUGCACAGCGGUCGCGAUGUUUAUUUGUCGAAAAUAUUGGAUAUAUCAGCGUCCCGAGGGUCCUACGUAAAAUAGGACACUUCGGGUAUUCACCUCAUAAGCUGUGUCUCGCGAGACCACAUACAAGAUUUAUCGAGGUCCGUCAACGCGUUGGGUCGGCGUUACAGUCCAUUACCGCCUGUCGUGUCAUUUUCCCCGAGUCACAGCGUCGAUCCGACCCGUCCGCAAAGGGUGUGCACUGUCGUCCGCAUCCCGUCCCCUAUUAUUGCUCUGUGCCGCGGCUCUGGCCUUGCGUAAUCUGGUUGCAUGGGCAACUUCGCAUAGGAACCGGUAGACGACUUGGACGCUACAUAAUAUGCCGAUUUAUAUACCCCACGAUGUAUCCUAGCCCGUGCGACCCCGUUAUUGGCCAGGGUUACGGUCAGAUCAAUUACAGAGCAUAUCUACUACCUUGGCUCUUCUUUAUAGGUUAUAGAACCGACCCGAAGAAAACGAGAAAAUCUGCGACAGAUGGGGAUUAUUCAAAGAACGGACAUCGCUGUUUGAUGACCUCCAAGCUACACGUGGAUGUUCUCGUUGUAGCGUGGCUCCAGAGUAACCGUCGACGGGAUAUUUCGUGUGCUCAGUUAGUUUUAAACAUUCAAGGCUUAGACACCGUCGCGCGUCCGCUAACAGUUGCUCCCGAUACUAAAAGCGGAAACAUAUUAUCAUCACAACGGAACUUCCGAUCCCCCGUCCACUAUAUUGGCGUUACUGUUCAAAGCGGAAUCAGGCCGCACUUCAAAGACCACGUGAUCGGUAAAAUCCUCGAGGAAAAAUUAUGCCCGUUAGGAACGAGCAGACCAGGCAAACUCCGAAGGCCAGGGAUGUGUAGUGGCUUUAUAAAAGCAAGGUAUUCCGCUGAGGAGAUGAUCCUUGGUCCGAUAGUUAGUCAGCCGAGUCUAAAUCUUCUAGAUGGUUCAUCUAAUCUAUCUCGUUGCAGGUCAGAAUACUACGUUGCGCAUCAUUCAGUGACUGAGAAAGAGAAAGGAGGACACCAACCCGCACCCAAGACAGCGCCGAAUACUGUUCAAUCUGGGGAUUUAUACCGUCGGGAGCACUCCGCGUGGCUUAGUAAUUCAGACAGAUUCGAGUCUGAGAAAAAUCGGGAUAGUACAGCAAUGCCGUGCAGUCUCUUGCCCAGCGUGGGCCAACACCUUCUGGCAUUGAGAUGCGUCAUAAGACAGCACGAUAUAACCUUCCGUAAUAGCAAACUCAAUCAGUACCUUUGCGGCUAUGACUUCAGCAUGCACGGGGUUCCGUCCCGUCCUGAGGGGGCAUUCAAACACGAUCUCCGUUACGACCUAUUAUGUAGACACCAGUGUAGCCGUCUUGGCACCCUAAAACCCGGAUUAAGUGUAUCAGCUACAUCCGACCCAGCAUUAAUGUGUAGAGCACAGCCCUCACGUUCAGAGAGUGGUAUACAUCGGUGGGGCUACUCCCUGUACAACCCGCGCGACUUUGAUCAUAUUGUUUACUCCGGGUGUACGGGCAAACGUGUGCUAAGAUUUGGGUUUGAAAGUACGAUUACCCCGCAGUUUCGCCCCGGAAACGGCUCCUCCGUAUUCAAAGCCAAUGUGGAGCCUUGCCUCUACUUCGAGGGACACAUACAAGCGCAGAAUCUCGCUUGUUUGCACCGCCUGCUUACGAACAUUAUGUUGCAGAAUCCAUUCGAUGCACGUCCACGGUACCGAACGCCAAUUAACUCGGGCCGGAAAUUUCCAUUGACGCCUUGGGCACAAUGCGAAUUUCCGAUCGGGGUAGGACAGCGCUUCCGAAAAGUUCCUAAUCAGGCUCUAGCAACAGUGGAGGGCUUCGAACUUACUUGUCUACUAAAGAGCAUCUUGUGUACGAUGACCGCGUGCCUCCAAACCGCCUUUACCCAGACUCAGGAUAUGUCCCGGGACAAUAUUCAAGUGACGUUACCGCUGAUACGUUUAGACCAAUUCCCUAGAGGUAUUGCGGCUAGGCGUACGAUCAUGGAUAAACUCUUCGUAAUAACGAGAAAAGACAACUCACAUCCACAGACGUCGCAGCACUCUGGAGUAACAAAAAUUCCCUCCACACGCGUUGUAGAAGGGAAGCCGUAUUUCAAGGCGACUCCAUCAAUUCACCAGUCGAGAGAAUACACAAACAUCGAGUUCCACUCAACCACGGGUCCUUUCACCUAUACAACUUCACUGUUCAACCCGGCGGCGGCAUGCUGUAACCGCGCGAAAUACGCCAGUCGGGUAAGAUGGCGGAAUGAAAUUUUAGACGGAAGCGUCUGCCUGCGGGCAGCUGUGUGGCUCCCGGGUUUGAGACCCAAAAUGGAAAAUUUAGCAGCCCUCGCAUGUAUGACGAUUGGGCAUACGAGCGUAGUUUUAGGUCCAUUUGAUAGCGUUUCCAAGAUUUUUGCAGCCUUAGCGGAAGGUCUUGAUACAAGAGACUUUGUAAGGAACAGAGUUUGUUACGGAAAUAAUAUAAAUGCUCGUCUCCAUAGGUCGACUAAGCGUCAGGGGACGCCUUGCCAAGUCGGUGAACUACGCCCAUUUCUGACUACUUGGCUCAUAAGGAGGCGUACGGCUUGUACGGGAGGUAUCCCAAGUGACCAAUCAAUAAUCGUGACCACGCUCCUCUCAGAGCCCAGGCGAGGGUAUCUCCGUGAGGCCGUAUUAGACCGGUCAGUAGCUCAAUUUGCGCUGGUUGCAGACCGAACGAUUCCUGCGUUACCUUCGAACCACGCUAUUACACAUCAUAUGUCCAGCUCCUGUAUCCCGGGGUACUGCGAUUGGCGGUAUCCAAGGCGUACGGGACUCCCUGCCGUUUGGACAGUAGCUAAGGCUACCAAGAGUCAUUGUGUCAGUUCGGUGGUAUCAGUACACGGACGGUAUUAUAUAUUCAUUGAAGUAAAUUGUUUACCAGAGUCUGGCGUCUGCACCUGCAAAGGUGUAAACCCCGAAUGUAUGCUAAUUCCGGGUCAAGUACCUCGUACUUAUGAACGGGCGGAUCUUGUGACUAGGACUAGUUCCUUUAUGGUCCACAAUCAAGGAGGGGCCAUACUACGUUAUGGCAGUUGUCGGGGGUUUAGCCUUGCGCGUCCGGCAAUGGCUCAGGACAGCAGCCCCGCCAUAAGGGAUAACUACACUAGGAGACGCCACUUUGGAACUUGCAAUCUUACUAAGGGAGCCCGCUCGGGUUGGUUGCCCUCAGUGCUGAAUACAUCCCGCCGGCGUGAUAAUUGGGAAUUGACGAUUCCUCGUAAGAAGAUCAAAAUACACCGCGCGAAAAGAAUAAGAAGCACUAGCGAACUAACGACUCCUUGCCUUCAACUAUCUGGGCAUUGUUCAACUAACCGUUACCACGACUCGGCAUCGCGCGAUCUGCAGGGAGCAGAUGAUCUGUAUAAUACAAUAGCAAUACUUAUAUUUCCUCAACUUACACGAAAAAGUUUAACGUUCUUUUGGCUAAAUAGUAAGCGGACGGAGUUUCCUAUGGUUAUCGGGAUAAGUGAUCAAGAACGUCCCGCGAAUCGCCUGCCAGGCCGAGAAAUCUUCCCUCCUCGGGUCUUCUCACUUCGGAGCAGCGUCACGGUGCCGGCUAAUCAUAUGGGUUCGAGUAGUGUGUCGGACCGUCCUCCAAACCCAGGUGUGGAACCAACCGUCUCUAGUCUAUUUUUUCCAGAAUGGGGACUGUUAUAUUCAAUCGAAGUUUCUGUAGUCAAUUACUACUCUUGGGGGCGACCCGAUCUCCAGAAGUACGAGAAUUCCGCGUUAUCCGAUAUGUCACCUUUUGUUAUUUCACGGAUACUAAUUAAGCAGGUCAGCGGUUUUAGAUGUACAUUACUUCGUUGUAUGUCCCAAAUACAACCCCAGUACGUCCCGCUGGUUGCGACGUCCCAAGAGUUGGACCACUUCGAACUUCCGGGUGGUCCAGCAUGGGCUCACUUUUUCGGCCAUGCUCUCAGAAAUACGAUUCCUCAUAUGCCUCAACCUAUGCCGUGGCCGUGGUCCUAUAAGUGUAACCCAUUUCGUACCGAAGGAGUCUCAAAUGUGGAAACGGUAUUCUUACGACCCUUCGCGUGUCGCGAAGUGGCCAUAAGGAACCCUUGUACAGAGAUCCAGGCCCUUCUACAGGAAGCUCCUCUCCUCCCUCGGUCGAACCCUGGCGAAAGCCGGUCAACAUUUUAUCUGGGGUGUACCCCAUGCAAGGAGUACAGAACGUUUUGCGUAGGAGAUUUCCGGUCACUCUCCCCUCAAUCGCAACCUGGGAGCGCUCUUUCGGCGAAACACUCGACGAAAACGUAUUCUAGAUUUUUCCGCAACUCCCCUCGCUCAAAGUAUCCCGGACGGAGUGCUGCACCCUAUUUAUGGUCACGUCUUUUACCUAUUGUCUACCCAUCCUUCCCUUCCUACAGCUUUGACAGAAAGCGCCCUAGUAGAGAUGCGCCCUUCUCUGACUCCAAAGGUACCAAUAUCUACGUAGGGACACACCCUCAGAAAAGAAAGUCCGAGGGCGACACUGCCUCGGGCUGUGAACAACCGCAGUUUAUCAGUACACCAUCAUGGACUGAGCUGACUGCUACCGGGUCUGGUAAAUUCCGGUGUCAGUAUUACCUCAGGGGUCCAGUCAUUCACAAUCGAGACUGGUCGGGAACCCUCAUCCGAGCAGCAAGCUCGGGUAAAUCCAAUAUGGGACACCGACGCAAUGAUCGGAUGGAUCUCAUCCGGCGUUUCGUUAGCGACUGCAGUUAUCCCUUAUUUUUUCGGCUAUAG")

def combine_rows(seq1,seq2):
    seqs = []
    for x in seq1:
        for y in seq2:
            seqs.append(x+y)
    return seqs

def prot_to_RNA(sequence_prot):
    dfcodon = get_codon_table()
    
    sequences_rna = []
    
    for i in sequence_prot:
        sequences_rna.append(dfcodon[dfcodon == i].index)
        
    print(sequences_rna)
    
    combo = combine_rows(sequences_rna[0],sequences_rna[1])
        
    for i in sequences_rna[2:]:
        combo = combine_rows(combo,i)
    
    return combo
    
combo = prot_to_RNA('MASS')
combo = prot_to_RNA('SYNGE')

print(len(combo))

#%%

#Peptide Encoding Problem
    
"""
Peptide Encoding Problem: Find substrings of a genome encoding a given amino acid sequence.

Input: A DNA string Text, an amino acid string Peptide, and the array GeneticCode.
Output: All substrings of Text encoding Peptide (if any such substrings exist).
"""

def reverse_compliment(rna_seq):
    reverse_dict = {'A':'U','U':'A','G':'C','C':'G'}
    return ''.join([reverse_dict[i] for i in rna_seq[::-1]])

def reverse_compliment_dna(dna_seq):
    reverse_dict = {'A':'T','T':'A','G':'C','C':'G'}
    return ''.join([reverse_dict[i] for i in dna_seq[::-1]])

def check_for_match(rna_seq,rna_len,rna_sequences_to_check):
    matches = []
    for i in range(len(rna_seq) - rna_len+1):
        print(i)
        sub_sequence = rna_seq[i:i+rna_len]
        for j in range(len(sub_sequence)):
            if not np.isin(sub_sequence[j],[x[j] for x in rna_sequences_to_check]).any():
                break
        matches.append(rna_to_dna(sub_sequence))
    return matches

def check_for_match2(rna_seq,rna_len,peptide):
    matches = []
    for i in range(len(rna_seq) - rna_len+1):
        #print(i)
        sub_sequence = rna_seq[i:i+rna_len]
        translation = RNA_to_prot(sub_sequence)
        if translation == peptide:
            
            matches.append(rna_to_dna(sub_sequence))
    return matches

def peptide_encoding_problem(dna_seq,peptide):
    rna_seq = dna_to_rna(dna_seq)
    
    rna_sequences_to_check = prot_to_RNA(peptide)
    rna_len = len(rna_sequences_to_check[0])
    
    matches = check_for_match2(rna_seq,rna_len,peptide)
    matches_reverse = check_for_match2(reverse_compliment(rna_seq),rna_len,peptide)
    matches_reverse_compliment = [reverse_compliment_dna(i) for i in matches_reverse]
    #print(matches_reverse_compliment)
    
    return matches+matches_reverse_compliment

peptide_encoding_problem('ATGGCCATGGCCCCCAGAACTGAGATCAATAGTACCCGTATTAACGGGTGA','MA')

string = """TGAACGGGTGCATCGACTAACACGTTCAGGTTCCTCTGAGAATCTATTATACCTTAGCCGGTTAGCCCCCCACCATATCCAATTTATCTCGGATCTGCGAGAGGGTACATAGTCACGCCAAGGTTCACGATGGCGCCATGTGAGATTCTGATTTTACGGGTTCTGTGGAGCCCTGGTCTATGTGTATGATAATAACTCGGTAGGTTAATAGGGACTATTCTAGCGGTTGAGGACCCTCTTATGCTCCTCACAGCCCTCGCTTTGGAGGAACTCACCTGGGCATCTTACATCCGCAGGCACCGGGCATGGTAAATGACCTCTCAACCTAAAGTAAGGTGTGAGATTAACGAATTTTCATCAAGTTTATTCCTCTCCGTCACAAAGCCACCGTAATGTTGTGTAAGACCGGCTTAAATCAAACGGTCCGCTAAATCGGAAGTTGGGCCCGGTACTTGGCAAGAACTGATTCTAAAGCCCCCATCCCGCAGACCGTCCGCTAAAGGGACCATGTTTGCAGCTTATAATGGCGGTCAAGACTAGCAAATCACACGTGATTCCCAAGCACCGGAAATCCGTAGTGTCTCATTGTACAGTGCCATTCTACCGATGGCACTGGATCTCTATCTCCCTTCGCAGTTTTTCTAGTGTTTTGGGGCGCACACCAGCTATGTCGACAGTAGAAGGAACACGCCTGCATTGCGTCCGTACACGAGGAGACGTTGCATTACATGTAGGGTTTTTAGGTCCGGTATAGATAGTGGCTTATGGATGGAGTCTAGAATGTTAAGCTGGAAAAGAACTTTTTTGGCTTCCCCGCGCGTCTAACCTCAAACAAGGGTGTGTTACCGACTTCCTCCCCGCCGCGTTGCAATATGAGTGACCGCGCTGCACTCCTGAAAACGAGGAGGAGTGCGCAGTAGAAGTCTCCGGGGGGAAAACAGCATGATATTATCCGCGGAATTCTAAGCCGTGGGGTTGTAAACGAATAGCGAGTGAAGAGGTCGAAACAGACGACCTATCCCCTTTGATCGCCTCGTGCTAGTATGTGGTGGTATTTCGTTCTAAGTGCAGGCACATCCGTGCCTCCATGCTGCCTCCAGAAGAGGTTTTTCGAAGGCCCGACCATACAACTTCGACACCCTTATGATTGGGCCGCCATACAATAGTCGGAGTCTGCGGGAGTGGTATCTTGTGCGCTTCCCTGGATCGGAGTAGTGAGTGGCATTGTACCATGCGTCATTACTGATTTTCGGTTTTAATTAAGTACCCACACGGCTATAACGTAGTGATTGCACTATTGGCGCGGGCGCCGCAGCAGCCCAATCCTGAGCTCTTTCGACTGAGACACCGGAATTTAGCTAGTGTGAATCACAGTATAGCTTGTATGTGCAGGATAGCAGCTCAGGGATCTGTGTTCGACGACACTGCCACTTATACGGGCCGAGAAATAAAGCGCCACGATGAAGGCTTTGCTTCTCCCTGGCGCAGTTTGACCGGTCCGTTTGCTTGGGAGGCATCGTGCTCTGAAGTGCTACCCGCCTGCGGGTCCGCTCCAATTCGCGAGAAGAATACGCAGCCCAAATTTAGTAGGATTCGAGCCATGTGGGGGCCGAACCCACGGAGCTCCACGGGCCATTTATAATTTCTACAGTAGGTTTGCCGGGGAAGGGACGGGGCTCACGCAATAGAAAATCAAGACCCTTCTAGCACTTAGCCACATCCTTGAGCGGGGCAACGGTTGTAGTTAAAGCGTGGTTGCCTCAAGAAATGCGACGTTATATCCCCGAGGGGGGTTGGCATAACAGCCACGTGAAGATCATGGGATTCAAGAGACAGTCTATGATAAATGACAATGCGGAGTGGCATTGTACGATGAGGCACTATATAGTGTCTCATCGTGCAGTGCCATTCGTCTTGCATTCGATATGGACAGCGCGCAGTCGCTGAGCTGAATGGCACTGCACAATGCGACACTACGTCTCAAGGTGAGGGACTGTGCTGAGATTGATCTCCGGCTCCTCGCCAGAGCAAAAGAAATTAATCCTCCTTTTCTCGACTCTCGCCTACTAAGTCCCGACAACTCACTAGGCGTGGAATACCCCCGACGACCGCTCGCCTGGCCCGGTTCGGCCTAGGTTATTGAGCGCAGGTTAACCTTAGGCAGTTCTCCTGGACGACATTTCGGATCTTACGCTCTCCCCCACTTCTAACCGGTTGATATATCTCCACTACATCAGAGCAATGTTACCTCCTATGAATAGGCGCAGTCCGGCCACGAAATCAGTGCGCTGTAGACTTCCGTAATCGTGAACGATACATGCCGACCAGATATGACCAGTATGTAGAAAAAGTCCAGTGTTCAGCCGACTTCACGACGTGCATAGACACTTCATGTATAATAATGACGCATTGTACAGTGCCACTCTAGTGTGGGGCGCCGTTGCTGAAAAGTTTAGATTTGTTAGTGGCAAGTCTCGGTTCGAGAGATACAGGCATGGAGGAAGATAATCCCTATAAGGTGTCTCCTCTTCCTTCGTTTCGGTTCTACCCACTCGACGTCTAACAGTACACGGGCAGAAGTTAGAGTATTCCTACTTGGTAAACGAAGTTACTATGGCCAAGGCCGTCACGAAGAGTGGCACTGCACGATGCGTCATTACTGCAGAAATAGGTTGGTACAGATGATCCAACTGATGTACTTCGCTTGACGCCCTGCGCCGAGAAACACTGGTATTTGACTTCCCCGCTGGACTATTTCCGGTCGAACAGAAAACGGGAGTGTGGGACACGCGCTCGTTGGACGGGTGTTTTCTAAACAGCCCACCGTAAAATTGTCTAGACGTTCCCCCTTTGGTCCCAGTGAGAAACACCTACGCCGTCCAACAAAATGGCGTTCTCGGCTTCCAACAGAGGTAAAGACGAGACATCTTCGATTCGCGGCTGATTCTAATCATGAATCTCCGGTGTCTAGCCTGTTAGTACTGCCTACACAGTCTCACGCATCTCCGATTATCAGGGTGAAAACTGAGCGTAACCTTAGTTAGGTGAGCGGAAAGCTGATCGGAATTGAACGACAACGACCAATAAGACACGAAATTTTATTCAGGTGGTACGCGGAGGAGTGCGATAAACTGCAGGATAGTGATGACTTTAAGTGATAGTGTCGCATCGTACAGTGCCATTCTATATGCCTAGTGAAATTAAACTGAGTGGCATTGTACGATGAGACACTATTTAGTACTCGATCACGGGACTTCGTGAGACATCTGCTTGTCAGCAAACGAGTAGTGCCTACGTGAGGATCAGCGTAGTCATGAATTGAATTTATAGCATCTATGCTGCAAGGCCGTCACGCCATCGAATACCTGTCTGTGAGCCCGCCCCCTCACACCGGGCCTGTGAATTGCTTTACTATTTGCCAAGGGATAGCATTCTAGCTGGGAGTGGCATTGTACTATGCGACACTACTCCGACTATGCTGGCTGGAATCTGAGCGTTCCGAGAAGCGTTGCGCTCTTACATGCTGCAAGAGTCAGTCCGATCTTAGAGGGGACCTCCACAACGTTACCCCGATTTAGGATTGCTATCTCCAGAGGTCCGCTGGCCTTATTTACACCGTGTCTTCATTAGCACTGAGTGAGAGGTCGAGACTATTCTGAGCACTTATAAAGAGGGTCATTACGCTGTAGGGAATGTGTCATGACGGGTTGGCTTGACTAGAGCTTGCTCGTCCTATCAGCCGTTACCGGGTACGGGAGGACCAGTAGAAAGAAGTGCATGCGTTTGGGAGCGATCAGCGGTTCCGGCGACTGATTGGTCAAACAGCAAACTTTCCCGAGGGTATGTGAATTATACTACTAAATCTATTGGAAACAATGGCATACTGGCTTGGCAGATTTGTAGCATGGGAACCACGGTATGATACTCGGGTTCGGTAGTTTGTTTTGCGAAAGTATCCATGTCCAGATATCTATATTTGACTCTGCGACAAAACCAATTGCAGTCTATGTTCGATGCCAGATGTCTGGCCCACAACCCATCGTCACGTTCAGTAAGATGAGTAGTGCCGCATGGTGCAGTGCCACTCTATCTGGTTTTACGTTCTCGAATGGCACTGCACAATGCGACATTATATTTGGTGTCCGCTTAACCGGGGCTAGCTCGTGACTCGGCATTTGAACGGGCTTGTATAGCCGAGCCTTGAAAAGATGTGAACTGTGAGCAAGACCCTATATTTATTGTCGCCAGCAAGACGTGATTTATAAATAGCTGGGCTCCCACTCGGAGGAACATCTTCCCATTACGTCCAGATCATGGTATCGACCAGACTTCAGAATACTACCCTCTGCAAGCATCTTTGACTCAGACCAGTGAGATTAGCGACAGTGCCATCTCGTTCACAAAGAGTTTGGAATGACATCCGAAGCAAAATAAATTATGGAGGTCAGAGCCTGGCCAAACATTGGCATCCGGGGCAACGGTGATATGCTTTAGCTCAACTCGCACTGGATTTAGTCAGAGCCCAGATCAAGCCGCACGAGCAGGGCGTGAAATGTGAATCGATTAGTAAAAGAGTCTTGAGCATAGACCGTATGGACCGAGACTAATTCACACGTCTCCGCGGGCGGCGTTCTGCTAACGCTGCGAGGGTTACCACCTCAATCTTCATGCGGACGGCCGGGAGTGGCACTGTACCATGCGACATTATAAGAAGTAGAGTGGGAATAAAGGAGAAGGTCGGTCGGGAAGAGTGGCACTGCACAATGAGACACTACATATGGATTTCACTCGCTCAATGTGGGGCACCGAACCGGGTTCCCGGGATTAGTTGTGCCCACTGGGCGTGCGTAATACCATCCCTGGTGATCACCCGCTGACTATGAAGATCCTTGTACTACACTCCAATGGTCCAACTTCGACTTGCACAAGTCGTACGGGATAAAACATTGGCGATCTCTTACAAGCACACAACAGTGGTTCCTAAGCACCAAATGAACTGTAGGATAGCCACTATGAGTGGTAGTTAAGTTGCATTTGTCGTCTTCGGTACTTACATCCTAAATCCTACGTCTCGTTCTACTTGAGTGACGCGCTATGTAAAATTTTCTTGTCCATGTATAGGTGAGGACGAACGCGATATAGGATCATCTCGTTGATTGAAGCGAGCACGAGGTATGGTAAGTGGCTAGTTGAGTTACTGACACTTACTACAGCGAATGGCACTGCACTATGAGGCATTATGCGCAACCCATGTGCTTGACTTTAAGTTACTAGAGCTGCATCTAATCACATCTCTCGTTAAAGCCTTGCTGGGGACGCGAAAACACTAAGCGAGGCACGTCAAATTGAGATCAGGTGCTACCTTTTCCAACGTACGCTGCGTTCGCAATGTTGGGGCAGCTGCACTCCACTTCCCTTTAAGCATCATAGACGCATGTGTGACTAAACCTGCTGGCTCGATTCCTTGCGCAGGAAGCATTCCTGTGCGATTGCTCCAGGGTGATGGTTGACCTCTAATTACGCCTCTATGTCGGTACATGTGGTGGTCCTGTCGCACGAGATTACTCCCACGCTGAGGATGCTACTCTCTGACTATCCCGATGAACTTGACGAGATTCTCTTTGCGGGTCGGACACCATAGTAGAGAGCACTGTCTATGTATGCAAGCATAAGGTTTTTTGTTTTGTCTCGTACTAGTCGGCTAACCCTACCTACATAATGGCGCATCGTACAGTGCCACTCTGTGACTCCCCTTGCCTTGGGAACATTGCATATTGAGGCCATGGTTGTCTTCTTCCTTGGAGTTTGTTCGATAATGACGCATTGTACAATGCCATTCGGGCAAATGCCGCGGGCGGTGATACACCTCTAGATCCCTTATTAGATTCGCCCTCTTGAGCAGGTCGCGCCTTTCATCCCTCGAGCCCCGAATTAGCACCATCGGTATTACGTGTGCTGATACCCACCTGCACGCATGCTTTGGATGCGCGGAGGTGAGATATGGCTGCGCGTTAGACCACTGCCACTAGCGGGCGGCGGGTAAACCCTGCTTATATCCTGTTCCACCTAGTGGAGGTTGCTCAGACTTCATCCTCGGTCTTCGGCCACCCGAGAAACCAGGAAGCGAGCACATTTATAGGCTCCGTTCGCGGGCAATTACTCCATGTCGCCACCTTCTGGTCCCACACAAGCTAACTACGGAACGTTCAGGATCTGTAATGGTTATCGTTCCTTAGTAGTTCAAGAGCAATTTCCATAGAGTTAAAGCCCCATGACCACACTCGATAAAGTGTACCGAGCCCAAGATAATGACGCATGGTGCAATGCCACTCCGTACGTCTGGAGCCACTTCCCGTTCATTTATATTCAGCAACTGACCTGTGCCGAGAGTGGCATTGCACGATGAGACACTATTGCTTTGCTGCTGCGTATGGCAAGCAGTGCTCAATTAGATAAAGGGCCTATCCAATGTAAGAAACAAAATATGACAGAGTGCTCGGAGTACGCATCGGGTCCCGTTGTTTCATTAATAGGACTCTTAGAAGAATCAGAACGCAGATACGGCCAAGTATTTTACCTGTTGCCTAACCGCGTGCAAGAGTAGACGTACCGGGGCATATCGCACGCTCACGCGGCGCTTCGATATAGGTTTATTTCGCCTAAGTAGCTCTGTATAGTGCGGCATCTCTCAGCAACAGAAGGGCCATCCACGACTGGCTTAACAGCATGATACCTCATGGCCCAGGGCCTCAAGTAATTGGTAGCGCGTAGTGTACGGATGTACTTTACAATAAGAGGATCAAACAGGTCATCAGTAATAAAGCCTCAACCCCGCGTAACTGGGCTCGTTCAATCCGGTGGGGGACAAGCATCAAACGGGGGACGCTGAATTGCATAGCGGGCCAGGATATTTAGATGCAGAGTTCTGATTGTAGGACGTCCGCGAGGACGCAAAATACCCACAGTAAAGTGTTACGCAAAAGTAGGACACCATGGATCGTTTGGGGTCTATTGGCATACAGGCTGTTTCGTGACAATACGCTTTGTCTCTGTTTAAGAAGTGTTCATCTTGCCTGGTCGAACATTTTTAACCTCCGAGTGATGGTACGCGTCTTGAGGTCCTTGGCGGATTGCAAAGAATCTTAAAACTGTTCTACCAGTATTGATAATATCCGCTAAAGCTCTGGCTATTGTGGGCAGCAGAGTACGCCTCACATGGCCTGAGAAGTGTGGGTACCGGTGCGCCGTGGAGTGTGTCTCTCTCTTGAACGAATCAACTTTTTAGTCCTAGTCCGTCCGCTGTACTGCACTTGGTATCAATCCGCGCTAGAGACAGCGTCTAGTGCGGTCTAATATGGACCCCGCCATACCTCACCCATGGGACAATAACTTGGGACTGGACTATACTATCCTCCTCGCGCGCGTGTACGAGACCGAGTACGACTTCTGCCCCAAGGATCAAGCAGGTGGATATCGTGGGGTTTGGCGTGGGACTTGCGGGGCTTCCCTGCTCCGGTCACAAAGACACGGATGGAATGGCATACTCCGTGATAAACGTCCTGTGTGCCGCGATTATATCCTTCTGTGCCGGTTAACTTAATTCAGGTCCTCCCGAGCTTTCAGTAGAGGAGCTTTGAGCACAAACAATGCGTGCGGTGTCTAGACTGCATGGAGTCTAGTACAGCTTACCAAGGCGGACAAATTGACGAATTTTTAAAATGTCACTTACAGATGCTGATCCCTGTTCATAAAGTATAGTCAACTTACTACGATATATTCCTCAAATAATCCCGTGCGTTGTCTTTTACTTCACGATACATCAGCGGAATACCTTTCACGGAAGTCATGGTCTACCTATCAACGATCCCGTGGAATACTCCCCCATACAACGGTTCTAAGAGCGCCCACAACACGGCTTTTCCTTACGAATGAATATGTATTGCAGGCACTTGCTTCGGTGTCGCCCGGGCGAAACGAAGGGGCAAGACCGTGGCTCCATAAAGTTATTTTGTGAGCCCCCTTGACAGGAGAATACAGTTGCGAACGTAATACCGGTGCTACGGAAGAAGACCTTGAGATCTAAGTCTGTGGACGCCAGGCGCTCATCCTACCAGTACAAATCCTACAAGCATTTAGCCTTCTCCAGGGATACAAAGATGGGCTACTGCAGGTTAGTCGATCACGTCGAACCGCAGTAACATAAGTGTTGAACACATGACAGCAATGTGGTCCCCCGTCTGAAGGCCGCTCATGACATATGAGCCCTGTGCCTTTCCGTTGGGCTTGGGCATTCACCCCCTCTTGTGCGCGAAATCAGCGTATCTTCTGTCTCACCGCTGGTGTAGGGCTGTACCTCTTTCGACCCCTGATAAAGTGGCGTATATCAAATACTCGCGAATTTGCACCGTGTTTTCCAGCGATCTGAAGGACGCGAGCTAGCATGATAATTCGTTCTAGTCTTCGATCTTGTTCACAGTGGAGGCTTGGGGCCAAGCGGGATCTCTCTCTTATTGTAGCCGCCGAGATGCTTTGGCAGGAAGGCCCGTCCGAGACGGAGGCGAGGTCCTCGCCAAATCATAACCCTCGTGTAAAGCTGTTCATAAGGACCAACCGGCGCCGTTTGTCATCCCTACATTTGATTAGTTCAAGGTGAGCTGGGCTTGGATGTGCGTAGGCACGTCGTGCGTGCCTTACGGTACTTACGTCTTATTAATGAATCCTCCGACGGAGGCAGCGGGAGTCAGATTATTCACACACAGCCAACTATTATACCCCCGCGATGGGTCATTACTCCATAATCACTTCTCCCATGCCTACCGATTGATAGAGGAGAACGTCGGAAAGGCCTGTTACTTTGAAACCGCTTCA"""
prot = "EWHCTMRHY"    

#ans = peptide_encoding_problem(string,prot)
#print('\n'.join(ans))

#%%

def get_kmers(prot_sequence,k):
    length = len(prot_sequence)-k+1
    kmers = []
    for i in range(length):
        kmers.append(prot_sequence[i:k+i])
    
    return kmers

def break_peptide_linear(prot_sequence):
    peptides = []
    for k in range(1,len(prot_sequence)+1):
        #print(k)
        #print(get_kmers(prot_sequence,k))
        for i in get_kmers(prot_sequence,k):
            peptides.append(i)
    return list(set(peptides))
        
break_peptide_linear('ABCD')

def get_permutations(prot_sequence):
    strings = []
    for i in range(len(prot_sequence)):
        #print(prot_sequence[-1] + prot_sequence[0:-1])
        prot_sequence = prot_sequence[-1] + prot_sequence[0:-1]
        strings.append(prot_sequence)
    return strings

def break_peptide_cyclic(prot_sequence):
    brokenpeptides = []
    for peps in get_permutations(prot_sequence):
        for peps2 in break_peptide_linear(peps):
            brokenpeptides.append(peps2)
        
    #return list(set(brokenpeptides))
    return list(set([''.join(np.sort(list(i))) for i in brokenpeptides]))

break_peptide_cyclic('ABCD')

def get_peptide_mass(prot_sequence):
    
    dfmass = get_mass_table()
    
    mass = 0
    for i in prot_sequence:
        mass = mass + dfmass[i]
    return mass

def GenerateSpectrum_cyclic(prot_sequence):
    peptides = break_peptide_cyclic(prot_sequence)
    
    masses = [0]
    #print(peptides)
    for pep in peptides:
        masses.append(get_peptide_mass(pep))
        
    #print(masses)
    
    #masses = np.sort(list(set(masses)))
    masses = np.sort(masses)
    
    return masses

def GenerateSpectrum_linear(prot_sequence):
    peptides = break_peptide_linear(prot_sequence)
    
    masses = [0]
    #print(peptides)
    for pep in peptides:
        masses.append(get_peptide_mass(pep))
        
    #print(masses)
    
    #masses = np.sort(list(set(masses)))
    masses = np.sort(masses)
    
    return masses

def print_cyclic_spectrum(prot_sequence):
    rawspec = [str(i) for i in GenerateSpectrum_cyclic(prot_sequence)]
    
    print(' '.join(rawspec))

def BFCyclopeptideSequencing(Spectrum):

    """BFCyclopeptideSequencing(Spectrum)
    for every peptide with Mass(Peptide) equal to ParentMass(Spectrum)
        if Spectrum = Cyclospectrum(Peptide)
            output Peptide"""
    
    return        
            

def get_mass_table():
    dfmass = pd.read_csv('/Users/brian/Documents/python/Coursera-Bioinfomatics/Part2/integer_mass_table.txt',
                      sep=' ',index_col=0,header=0).squeeze("columns")
    return dfmass

def linear_spectrum(peptide):
    """PrefixMass(0) ← 0
    for i ← 1 to |Peptide|
        for every symbol s in Alphabet
            if s = i-th amino acid in Peptide
                PrefixMass(i) ← PrefixMass(i − 1) + AminoAcidMass[s]
    LinearSpectrum ← a list consisting of the single integer 0
    for i ← 0 to |Peptide| − 1
        for j ← i + 1 to |Peptide|
            add PrefixMass(j) − PrefixMass(i) to LinearSpectrum
    return sorted list LinearSpectrum
    """
    dfmass = get_mass_table()
    prefix_mass = [0]
    alphabet = dfmass.index
    
    for i in range(len(peptide)):
        for s in alphabet:
            if s == peptide[i]:
                prefix_mass.append(prefix_mass[-1] + dfmass[s])
    print(prefix_mass)
    linear_spectrum = [0]    
    for i in range(len(peptide)):
        for j in range(i+1,len(peptide)+1):
            linear_spectrum.append(prefix_mass[j] - prefix_mass[i])

    
    return np.sort(linear_spectrum)

def cyclic_spectrum(peptide):
    """PrefixMass(0) ← 0
    for i ← 1 to |Peptide|
        for every symbol s in Alphabet
            if s = i-th amino acid in Peptide
                PrefixMass(i) ← PrefixMass(i − 1) + AminoAcidMass﻿[s]
    peptideMass ← PrefixMass(|Peptide|)
    CyclicSpectrum ← a list consisting of the single integer 0
    for i ← 0 to |Peptide| − 1
        for j ← i + 1 to |Peptide|
            add PrefixMass(j) − PrefixMass(i) to CyclicSpectrum
            if i > 0 and j < |Peptide|
                add peptideMass - (PrefixMass(j) − PrefixMass(i)) to CyclicSpectrum
    return sorted list CyclicSpectrum
    """
    dfmass = get_mass_table()
    prefix_mass = [0]
    alphabet = dfmass.index
    
    for i in range(len(peptide)):
        for s in alphabet:
            if s == peptide[i]:
                prefix_mass.append(prefix_mass[-1] + dfmass[s])
    print(prefix_mass)
    linear_spectrum = [0]    
    for i in range(len(peptide)):
        for j in range(i+1,len(peptide)+1):
            linear_spectrum.append(prefix_mass[j] - prefix_mass[i])
            
            if i > 0 and j < len(peptide):
                linear_spectrum.append(prefix_mass[-1] - (prefix_mass[j] - prefix_mass[i]) )

    
    return np.sort(linear_spectrum)
    
' '.join([str(i) for i in linear_spectrum('SLATAAKLPWPNGNSTRYFRIILWSYCHRKIAWHWFSYTFV')])
    


"""
BFCyclopeptideSequencing(Spectrum)
    for every peptide with Mass(Peptide) equal to ParentMass(Spectrum)
        if Spectrum = Cyclospectrum(Peptide)
            output Peptide
            """

    
    
 