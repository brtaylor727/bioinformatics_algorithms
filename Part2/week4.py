#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 28 19:01:59 2022

@author: brian
"""

import week3 as w3

from collections import defaultdict
import numpy as np
import pandas as pd

w3.GenerateSpectrum_cyclic('NQEL')

def cyclopeptide_score(prot_sequence,spectrum,linear=False):
    experimental_spectrum = [int(i) for i in spectrum.split()]
    if linear:
        
        theoretical_spectrum = w3.linear_spectrum(prot_sequence)
    else:
        theoretical_spectrum = w3.cyclic_spectrum(prot_sequence)

    
    experimental_spect = defaultdict(int)
    for exp_mass in experimental_spectrum:
        experimental_spect[exp_mass] = experimental_spect[exp_mass] + 1
        
    #print(experimental_spect)
        
    theoretical_spect = defaultdict(lambda: 0)
    for the_mass in theoretical_spectrum:
        theoretical_spect[the_mass] = theoretical_spect[the_mass] + 1
    #print(theoretical_spect)
    
    matches = 0
    matches2 = 0
    matches3 = 0
    for the_mass in theoretical_spect.keys():
        matches2 += np.min([theoretical_spect[the_mass],experimental_spect[the_mass]])
        if experimental_spect[the_mass] != 0:
            if theoretical_spect[the_mass] == experimental_spect[the_mass]:
                matches += theoretical_spect[the_mass]
                matches3 += theoretical_spect[the_mass]
            else:
                #print('multiplicity?',theoretical_spect[the_mass],experimental_spect[the_mass])
                matches += np.min([theoretical_spect[the_mass],experimental_spect[the_mass]])
                #matches += theoretical_spect[the_mass]
    #return matches,matches2,matches3
    return matches
    
    """
    matches = 0
    for the_mass in theoretical_spectrum:
        for exp_mass in experimental_spectrum:
            if exp_mass == the_mass:
                matches = matches+1
                break
    return matches
    """
    """
    matches = 0
    for the_mass in list(set(theoretical_spectrum)):
        if np.isin(the_mass,experimental_spectrum):
            matches = matches+1
    return matches
    """

cyclopeptide_score('NQEL','0 99 113 114 128 227 257 299 355 356 370 371 484')

peptide = 'FQQPAYCSTHRCMRSGFYMGRQQHILRNHKAAWDEFPFQ'
spect = """0 57 57 71 71 71 87 87 97 99 103 103 113 113 113 113 114 115 115 128 128 128 128 129 131 131 131 137 137 142 144 147 147 147 147 147 156 156 156 163 163 168 186 188 190 199 204 213 224 225 226 226 234 234 234 244 245 246 246 250 250 256 257 259 259 262 266 268 269 269 270 270 271 275 275 275 276 281 291 294 296 301 310 326 328 330 331 337 337 344 349 351 353 353 355 363 363 363 367 371 372 373 374 374 375 382 382 383 390 391 393 401 401 403 403 412 418 422 424 424 428 430 434 439 441 443 444 452 454 456 457 458 459 476 476 490 496 498 498 500 500 501 505 505 507 514 515 515 519 519 521 521 521 521 522 527 529 531 550 555 559 562 570 571 571 571 572 576 577 585 587 587 589 591 600 608 608 614 615 620 627 628 632 632 633 637 642 642 642 648 649 649 650 652 654 662 668 668 671 671 676 678 686 689 690 699 700 701 702 707 711 711 713 719 722 722 729 733 734 739 745 745 746 747 755 764 765 767 771 775 777 777 779 783 784 786 789 796 796 797 798 802 816 818 818 820 823 824 825 826 831 837 842 842 846 847 853 857 859 862 870 874 874 876 876 877 880 892 894 897 901 910 911 911 912 924 924 924 925 933 933 933 935 937 939 945 945 945 946 951 956 958 963 963 965 965 970 972 978 979 981 983 990 1005 1005 1009 1013 1015 1017 1020 1021 1022 1024 1034 1039 1040 1042 1048 1052 1053 1066 1066 1067 1071 1072 1074 1076 1076 1077 1080 1083 1085 1089 1092 1092 1093 1093 1096 1096 1098 1101 1108 1112 1112 1118 1123 1130 1142 1146 1147 1150 1161 1161 1167 1168 1169 1169 1169 1170 1173 1179 1186 1187 1189 1191 1195 1198 1199 1199 1203 1203 1211 1213 1214 1220 1221 1221 1224 1226 1227 1229 1240 1243 1243 1248 1252 1255 1260 1265 1270 1274 1274 1282 1284 1286 1292 1297 1298 1298 1298 1300 1300 1301 1310 1314 1325 1327 1330 1331 1333 1334 1335 1336 1338 1342 1345 1346 1347 1352 1354 1357 1358 1361 1366 1368 1368 1374 1384 1387 1395 1397 1399 1402 1411 1416 1425 1429 1429 1431 1433 1433 1438 1438 1440 1445 1445 1445 1446 1448 1451 1454 1456 1460 1461 1461 1462 1464 1466 1470 1473 1474 1487 1494 1496 1496 1497 1499 1499 1504 1513 1518 1522 1522 1524 1525 1532 1533 1542 1543 1551 1553 1560 1561 1564 1566 1570 1573 1573 1574 1576 1577 1582 1587 1592 1593 1593 1596 1601 1602 1602 1604 1607 1611 1613 1617 1621 1622 1624 1625 1627 1644 1645 1653 1655 1657 1659 1664 1666 1667 1674 1680 1685 1688 1689 1690 1696 1700 1701 1704 1707 1710 1710 1713 1716 1717 1720 1720 1721 1721 1724 1727 1729 1735 1741 1755 1756 1758 1764 1767 1769 1772 1774 1777 1784 1787 1788 1788 1790 1792 1794 1798 1800 1801 1803 1811 1813 1819 1823 1827 1829 1836 1836 1837 1841 1843 1846 1848 1851 1852 1855 1857 1857 1857 1859 1863 1869 1875 1882 1890 1892 1895 1897 1900 1900 1903 1905 1914 1914 1914 1916 1916 1923 1925 1925 1928 1930 1936 1940 1946 1950 1950 1951 1952 1953 1955 1966 1966 1970 1971 1985 1985 1987 1988 1992 1993 1995 2003 2004 2010 2011 2017 2020 2022 2023 2025 2028 2029 2034 2037 2037 2050 2053 2053 2056 2058 2058 2063 2068 2070 2075 2080 2083 2086 2087 2092 2093 2095 2097 2098 2100 2107 2108 2122 2123 2124 2124 2132 2132 2132 2137 2138 2140 2145 2149 2150 2151 2157 2159 2164 2166 2167 2174 2176 2181 2184 2184 2185 2189 2193 2195 2197 2200 2208 2208 2210 2211 2215 2221 2226 2231 2234 2235 2236 2237 2239 2244 2245 2251 2253 2255 2260 2263 2272 2276 2279 2279 2280 2287 2292 2293 2295 2296 2298 2299 2303 2303 2306 2315 2321 2326 2332 2334 2341 2344 2344 2348 2349 2355 2356 2358 2358 2359 2363 2364 2364 2366 2367 2373 2374 2378 2378 2381 2388 2390 2396 2401 2407 2416 2419 2419 2423 2424 2426 2427 2429 2430 2435 2442 2443 2443 2446 2450 2459 2462 2467 2469 2471 2477 2478 2483 2485 2486 2487 2488 2491 2496 2501 2507 2511 2512 2514 2514 2522 2525 2527 2529 2533 2537 2538 2538 2541 2546 2548 2555 2556 2558 2563 2565 2571 2572 2573 2577 2582 2584 2585 2590 2590 2590 2598 2598 2599 2600 2614 2615 2622 2624 2625 2627 2629 2630 2635 2636 2639 2642 2647 2652 2654 2659 2664 2664 2666 2669 2669 2672 2685 2685 2688 2693 2694 2697 2699 2700 2702 2705 2711 2712 2718 2719 2727 2729 2730 2734 2735 2737 2737 2751 2752 2756 2756 2767 2769 2770 2771 2772 2772 2776 2782 2786 2792 2794 2797 2797 2799 2806 2806 2808 2808 2808 2817 2819 2822 2822 2825 2827 2830 2832 2840 2847 2853 2859 2863 2865 2865 2865 2867 2870 2871 2874 2876 2879 2881 2885 2886 2886 2893 2895 2899 2903 2909 2911 2919 2921 2922 2924 2928 2930 2932 2934 2934 2935 2938 2945 2948 2950 2953 2955 2958 2964 2966 2967 2981 2987 2993 2995 2998 3001 3001 3002 3002 3005 3006 3009 3012 3012 3015 3018 3021 3022 3026 3032 3033 3034 3037 3042 3048 3055 3056 3058 3063 3065 3067 3069 3077 3078 3095 3097 3098 3100 3101 3105 3109 3111 3115 3118 3120 3120 3121 3126 3129 3129 3130 3135 3140 3145 3146 3148 3149 3149 3152 3156 3158 3161 3162 3169 3171 3179 3180 3189 3190 3197 3198 3200 3200 3204 3209 3218 3223 3223 3225 3226 3226 3228 3235 3248 3249 3252 3256 3258 3260 3261 3261 3262 3266 3268 3271 3274 3276 3277 3277 3277 3282 3284 3284 3289 3289 3291 3293 3293 3297 3306 3311 3320 3323 3325 3327 3335 3338 3348 3354 3354 3356 3361 3364 3365 3368 3370 3375 3376 3377 3380 3384 3386 3387 3388 3389 3391 3392 3395 3397 3408 3412 3421 3422 3422 3424 3424 3424 3425 3430 3436 3438 3440 3448 3448 3452 3457 3462 3467 3470 3474 3479 3479 3482 3493 3495 3496 3498 3501 3501 3502 3508 3509 3511 3519 3519 3523 3523 3524 3527 3531 3533 3535 3536 3543 3549 3552 3553 3553 3553 3554 3555 3561 3561 3572 3575 3576 3580 3592 3599 3604 3610 3610 3614 3621 3624 3626 3626 3629 3629 3630 3630 3633 3637 3639 3642 3645 3646 3646 3648 3650 3651 3655 3656 3656 3669 3670 3674 3680 3682 3683 3688 3698 3700 3701 3702 3705 3707 3709 3713 3717 3717 3732 3739 3741 3743 3744 3750 3752 3757 3757 3759 3759 3764 3766 3771 3776 3777 3777 3777 3783 3785 3787 3789 3789 3789 3797 3798 3798 3798 3810 3811 3811 3812 3821 3825 3828 3830 3842 3845 3846 3846 3848 3848 3852 3860 3863 3865 3869 3875 3876 3880 3880 3885 3891 3896 3897 3898 3899 3902 3904 3904 3906 3920 3924 3925 3926 3926 3933 3936 3938 3939 3943 3945 3945 3947 3951 3955 3957 3958 3967 3975 3976 3977 3977 3983 3988 3989 3993 4000 4000 4003 4009 4011 4011 4015 4020 4021 4022 4023 4032 4033 4036 4044 4046 4051 4051 4054 4054 4060 4068 4070 4072 4073 4073 4074 4080 4080 4080 4085 4089 4090 4090 4094 4095 4102 4107 4108 4114 4114 4122 4131 4133 4135 4135 4137 4145 4146 4150 4151 4151 4151 4152 4160 4163 4167 4172 4191 4193 4195 4200 4201 4201 4201 4201 4203 4203 4207 4207 4208 4215 4217 4217 4221 4222 4222 4224 4224 4226 4232 4246 4246 4263 4264 4265 4266 4268 4270 4278 4279 4281 4283 4288 4292 4294 4298 4298 4300 4304 4310 4319 4319 4321 4321 4329 4331 4332 4339 4340 4340 4347 4348 4348 4349 4350 4351 4355 4359 4359 4359 4367 4369 4369 4371 4373 4378 4385 4385 4391 4392 4394 4396 4412 4421 4426 4428 4431 4441 4446 4447 4447 4447 4451 4452 4452 4453 4453 4454 4456 4460 4463 4463 4465 4466 4472 4472 4476 4476 4477 4478 4488 4488 4488 4496 4496 4497 4498 4509 4518 4523 4532 4534 4536 4554 4559 4559 4566 4566 4566 4575 4575 4575 4575 4575 4578 4580 4585 4585 4591 4591 4591 4593 4594 4594 4594 4594 4607 4607 4608 4609 4609 4609 4609 4619 4619 4623 4625 4635 4635 4651 4651 4651 4665 4665 4722"""

cyclopeptide_score(peptide,spect)


def spectrum_convolution(spectrum):
    var = []
    spectrum = [int(i) for i in spectrum.split(' ')]
    for x in range(len(spectrum)):
        for y in range(x,len(spectrum)):
            if spectrum[y]-spectrum[x] != 0:
                var.append(spectrum[y]-spectrum[x])
    return var

def prettyprint(x):
    print(' '.join([str(i) for i in x]))
    
prettyprint(spectrum_convolution('0 87 97 97 103 113 128 137 137 163 184 200 224 234 240 241 260 265 276 321 327 337 337 347 362 373 378 404 424 424 460 465 474 475 484 501 521 541 561 578 587 588 597 602 638 638 658 684 689 700 715 725 725 735 741 786 797 802 821 822 828 838 862 878 899 925 925 934 949 959 965 965 975 1062'))


#%%

class keydefaultdict(defaultdict):
    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError( key )
        else:
            ret = self[key] = self.default_factory(key)
            return ret


"""
LeaderboardCyclopeptideSequencing(Spectrum, N)
    Leaderboard ← set containing only the empty peptide
    LeaderPeptide ← empty peptide
    while Leaderboard is non-empty
        Leaderboard ← Expand(Leaderboard)
        for each Peptide in Leaderboard
            if Mass(Peptide) = ParentMass(Spectrum)
                if Score(Peptide, Spectrum) > Score(LeaderPeptide, Spectrum)
                    LeaderPeptide ← Peptide
            else if Mass(Peptide) > ParentMass(Spectrum)
                remove Peptide from Leaderboard
        Leaderboard ← Trim(Leaderboard, Spectrum, N)
    output LeaderPeptide
"""

def mass_calc(peptide):
    mass_counter = 0
    
    dfmass = w3.get_mass_table()
    
    for p in peptide:
        mass_counter += dfmass[p]
        
    return mass_counter

def longmass(peptide):
    mass_string = ''
    
    dfmass = w3.get_mass_table()
    
    for p in peptide:
        mass_string += str(dfmass[p])+'-'
        
    return mass_string[:-1]

def ParentMass(spectrum):
    pmass = int(spectrum.split(' ')[-1])
    return pmass

def expand(Leaderboard,par_mass,mass):
    AAs = ['G', 'A', 'S', 'P', 'V', 'T', 'C', 'I', 'N', 'D', 'K', 'E',
           'M', 'H', 'F', 'R', 'Y', 'W'] #, 'L','Q',
    
    newlist = []
    for L in Leaderboard:
        for a in AAs:
            if mass[L+a] <= par_mass:
                newlist.append(L+a)
            
    #print(Leaderboard)
    #print(newlist)
    return Leaderboard+newlist

def trim(Leaderboard,Spectrum,N,scores):
    #LinearScores = []
    """for j in range(len(Leaderboard)):
        peptide = Leaderboard[j]
        #LinearScores.append( cyclopeptide_score(peptide,Spectrum,linear=True))
        LinearScores.append( scores[peptide])"""
    
    LinearScores = [scores[peptide] for peptide in Leaderboard]
    
    dfscores = pd.Series(LinearScores,Leaderboard).sort_values(ascending=False)
    
    print('scores',dfscores)
    
    try:
        #ans = list(dfscores[dfscores >= dfscores[N-1]].index)
        ans = list(dfscores[dfscores > dfscores[N-1]].index)
    except:
        ans = list(dfscores.index)
    
    return ans

class score_class:
    def __init__(self, spectrum, linear):
        self.s = spectrum
        self.l = linear
        
    def score_calc(self, peptide):
        return cyclopeptide_score(peptide,self.s,self.l)

class mass_class:
    def __init__(self):
        
        self.dfmass = w3.get_mass_table()
        self.mass_dict = self.dfmass.to_dict()
        self.mass_dict[''] = 0
        
    
    def mass_calc(self, peptide):
        

        try:
            return self.mass_dict[peptide]
        except:
            ans = self.dfmass[peptide[-1]] + self.mass_calc(peptide[:-1])
            self.mass_dict[peptide] = ans
            return ans
        



import time
def LeaderboardCyclopeptideSequencing(Spectrum, N):
    sc = score_class(Spectrum,True)
    mc = mass_class()
    mass = keydefaultdict(mass_calc)
    scores = keydefaultdict(sc.score_calc)
    
    Leaderboard = ['']
    LeaderPeptide = ''
    
    par_mass = ParentMass(Spectrum)
    
    while len(Leaderboard) != 0:
        #print('Leader')
        #print(Leaderboard)
        Leaderboard = expand(Leaderboard,par_mass,mass)
        for peptide in Leaderboard:
            
            #print(peptide)
            #time.sleep(.1)
            
            if mc.mass_calc(peptide) == par_mass:
                if cyclopeptide_score(peptide,Spectrum,linear=True) > cyclopeptide_score(LeaderPeptide,Spectrum,linear=True):
                    LeaderPeptide = peptide
            """
            elif mass[peptide] > ParentMass(Spectrum):
                #remove peptide from leaderboard
                #print('remove',peptide)
                Leaderboard.remove(peptide) # may be slow
            else:
                print('dont remove',peptide)
                """
               
        Leaderboard = [peptide for peptide in Leaderboard if mc.mass_calc(peptide) <= par_mass]
        print('Leaderpeptide',LeaderPeptide)
        lb = len(Leaderboard)
        print('len before',lb)
        Leaderboard = trim(Leaderboard,Spectrum,N,scores)
        la = len(Leaderboard)
        print('len after',la)
        if (lb == la) & (mc.mass_calc(LeaderPeptide) == par_mass):
            break
        print('Leaderboard',Leaderboard)
    return LeaderPeptide


LeaderboardCyclopeptideSequencing('0 71 113 129 147 200 218 260 313 331 347 389 460', 10)
#stringy = """0 71 71 71 87 97 97 99 101 103 113 113 114 115 128 128 129 137 147 163 163 170 184 184 186 186 190 211 215 226 226 229 231 238 241 244 246 257 257 276 277 278 299 300 312 316 317 318 318 323 328 340 343 344 347 349 356 366 370 373 374 391 401 414 414 415 419 427 427 431 437 441 446 453 462 462 462 470 472 502 503 503 511 515 529 530 533 533 540 543 547 556 559 569 574 575 584 590 600 600 604 612 616 617 630 640 640 643 646 648 660 671 683 684 687 693 703 703 719 719 719 729 730 731 737 740 741 745 747 754 774 780 784 790 797 800 806 818 826 827 832 833 838 846 846 847 850 868 869 877 884 889 893 897 903 908 913 917 930 940 947 956 960 960 961 964 965 966 983 983 985 1002 1009 1010 1011 1021 1031 1031 1036 1053 1054 1058 1059 1062 1063 1074 1076 1084 1092 1103 1113 1122 1124 1130 1133 1134 1145 1146 1146 1149 1150 1155 1156 1171 1173 1174 1187 1191 1193 1200 1212 1221 1233 1240 1242 1246 1259 1260 1262 1277 1278 1283 1284 1287 1287 1288 1299 1300 1303 1309 1311 1320 1330 1341 1349 1357 1359 1370 1371 1374 1375 1379 1380 1397 1402 1402 1412 1422 1423 1424 1431 1448 1450 1450 1467 1468 1469 1472 1473 1473 1477 1486 1493 1503 1516 1520 1525 1530 1536 1540 1544 1549 1556 1564 1565 1583 1586 1587 1587 1595 1600 1601 1606 1607 1615 1627 1633 1636 1643 1649 1653 1659 1679 1686 1688 1692 1693 1696 1702 1703 1704 1714 1714 1714 1730 1730 1740 1746 1749 1750 1762 1773 1785 1787 1790 1793 1793 1803 1816 1817 1821 1829 1833 1833 1843 1849 1858 1859 1864 1877 1886 1890 1893 1900 1900 1903 1904 1918 1922 1930 1930 1931 1961 1963 1971 1971 1971 1980 1987 1992 1996 2002 2006 2006 2014 2018 2019 2019 2032 2042 2059 2060 2063 2067 2077 2084 2086 2089 2090 2093 2105 2110 2115 2115 2116 2117 2121 2133 2134 2155 2156 2157 2176 2176 2187 2189 2192 2195 2202 2204 2207 2207 2218 2222 2243 2247 2247 2249 2249 2263 2270 2270 2286 2296 2304 2305 2305 2318 2319 2320 2320 2330 2332 2334 2336 2336 2346 2362 2362 2362 2433"""
#ans = LeaderboardCyclopeptideSequencing(stringy, 325)
#print(longmass(ans))

stringy = """0 71 71 87 97 99 99 101 101 103 113 115 128 128 129 131 147 156 163 170 184 186 186 196 198 199 218 229 230 230 234 256 257 259 262 266 271 276 283 285 285 297 317 327 327 331 347 349 356 356 357 358 365 374 379 382 385 404 416 418 422 426 427 428 428 446 450 459 469 480 483 484 486 503 505 513 513 521 527 535 537 540 549 551 555 556 557 587 600 606 608 612 612 614 614 632 636 650 650 655 658 666 668 683 684 684 701 703 705 713 713 721 735 739 743 743 747 755 765 771 783 784 796 797 806 820 822 830 831 841 842 844 844 848 854 862 868 884 891 897 902 913 921 925 931 934 941 943 955 959 962 963 967 969 972 977 1006 1014 1015 1018 1024 1026 1040 1040 1040 1054 1059 1060 1062 1077 1078 1086 1088 1090 1092 1100 1111 1119 1121 1127 1139 1153 1163 1171 1185 1187 1187 1189 1193 1201 1205 1206 1210 1218 1222 1224 1224 1226 1240 1248 1258 1272 1284 1290 1292 1300 1311 1319 1321 1323 1325 1333 1334 1349 1351 1352 1357 1371 1371 1371 1385 1387 1393 1396 1397 1405 1434 1439 1442 1444 1448 1449 1452 1456 1468 1470 1477 1480 1486 1490 1498 1509 1514 1520 1527 1543 1549 1557 1563 1567 1567 1569 1570 1580 1581 1589 1591 1605 1614 1615 1627 1628 1640 1646 1656 1664 1668 1668 1672 1676 1690 1698 1698 1706 1708 1710 1727 1727 1728 1743 1745 1753 1756 1761 1761 1775 1779 1797 1797 1799 1799 1803 1805 1811 1824 1854 1855 1856 1860 1862 1871 1874 1876 1884 1890 1898 1898 1906 1908 1925 1927 1928 1931 1942 1952 1961 1965 1983 1983 1984 1985 1989 1993 1995 2007 2026 2029 2032 2037 2046 2053 2054 2055 2055 2062 2064 2080 2084 2084 2094 2114 2126 2126 2128 2135 2140 2145 2149 2152 2154 2155 2177 2181 2181 2182 2193 2212 2213 2215 2225 2225 2241 2248 2255 2264 2280 2282 2283 2283 2296 2298 2308 2310 2310 2312 2312 2314 2324 2340 2340 2411"""
ans = LeaderboardCyclopeptideSequencing(stringy, 156)
print(longmass(ans))











