#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 27 15:09:01 2022

@author: brian
"""

import pandas as pd
"""
Input: An integer k and a string Text.
Output: Compositionk(Text) (the k-mers can be provided in any order).
"""
def stringComposition(k,text):
    n = len(text)        
    return [text[i:i+k] for i in range(n-k+1)]

#print(stringComposition(100,'TTTTCTGCAGCGAGTCGAAGAGGATTCGCGCGTACCTTAGCTGGAGCGCATAAGTTGGAAGAGCCTCCATCATAGATATATCCACCACAAAGGCCCCGCATTCCTGACGTGAGAAGTTCCGCGCAGAGCGCCTGGGCTAGAGTCCTAGAAATTGGTAAAGTACAATACCGCACCACGGGCTCAAGGCGGAAGATCCTTCATCTAATCGCCGCGAGTGGTGATCAGATTCGCCTCCGCCTTCGTTTCCTCATGCTTTTTGGTTTGTATAACACCTCGGCCTCGCCTGTGTACACTGTCGCTGGGGTGACCATCCGCGTGAGATAAACTTAAAATGTGCAACATAAGTTAATGCTCAGACATGTTGTGTGCATGTAAGATATGTTCGACCATCCCGAACCATAAACCAGCATCGGTGGGGCGGCTATGGTCCGGACGCACGTCTGCGCACCGGCAGTAAACCGAGGAAAAGCGCTGGGCTAGGGGTTCTGCCTCGTCAAGGTTATGAACCTGGGTCGTCGGGCCACTGTATTACTACGGAGGACGTCTGCTGCAGCAAGATGTGACTAGCGCCAGGGGATATGGACTCCCGTTTAGTAATGGTAGAGGCAACCTGTTCTTGCGGTTGCCAGAACTGTCGGTTCGAGAACACGGGCTTTGTGTCGCGTAATCCAAAATCAGCTAATCAGTGCCTGTCGTGTCAGAAATACATTAGAATTGCGGACCTCCCTTGTGTTGCCGTGAATGCTGGCTTGGGACGAACTGTCAAGATAATACAGGGGGGAGTCGGGAGGCTATTACTTTTATCGTGGGATACCGATCGCCTGGGAGAGGGCACTGAACGGTATCTTCTAGAACTTTCGTCGCGTCACGGGCCTCGCGGTGTGGTTAGCGGGGTAGCCGGCACTAAGGAGCTGATGCCCTGTATCGTTGCATGTCTATCATGCGCGAGGGAATTAGCATGTTTCTACGTAACGCGTGCAGCTTAAAGGCGCTGATGCTCTATAAGCACGGTGCCGTACTATACAACCATCCAGAGACATGTTCTGTCCCCTGATTGTAGGCGGTGGAGATGGACTAGGACCTAACCTCGGCTAACCGGCAGTAAATTACCGCGTAGCCGGCCCCGTTTGGGCTACTCGTTATTACGACACGAGGACGGATTTTAAGGCAGCGTATTAACCCGCCTTACTTACTGCCCTTTCGTAATGGCTGCGAGGTAACTGGAATGAGAAGCTCAAGAGGTATGGGTTTTATAACGCCGCTGTCAGTCTCATCCCCGCGTTCCGAGGTGGACCGGTCGTGCGTGAACTGATGGGGGCGGCTCGACAGTATAGCTGTGCGTTCTCTTGCGCCCCGTCCAATGTTACTGGGCCAATGAGTTGTATGCGGATGATCACAGTTACTGCATACTGTTGTACGGGGATAGTTGACCTCTTGTGAGGTACGTCCAGGCAGGATGGTGGAGTGCCGCAACGCTTTATAAACTAGTATCTAATACCCGCGGGCAGCGAGCCACTCTTGTCTGGTAAGTAACCGGCCCGGCGTATTGCACGTCGCACGGCACAATATGCCTAATGTATGCACTGATCAAGTCGGACTTTCGCGCGATCCCGAAGTCATTAAGCGCATTACGGCTGGGGGAGCTCAAGTAGTAAATTAGGTTCGCTTGTCCATTTCGCGTGCACAGCGGAAAGGCGGGGTAGATAGCATAATAGACTTCGACTCAAGTGCTATCACTCATTTAGACAACTTGAAATTGAACACCATAAATTCTGCGAGGTCTGCTTCTAAGTAGACGGAAAGTCAATAGGCGAGTTTTCAGATCACGAATATAGGCCCGATAAACCGCACTTTAATTCTGCAATGTGATAACCAAAACTAGCAATGATCGTAGAAGTCATACAGCAGAGCCTAGCGGCTACGACATGGACGGTCGACGGATATTTCGTTTCCTGTCCGGCGGTGGTTCTAGTGTCTTCTTAAGCGGTCCTCGCTCGACTTCTAGTACACCGGATGGTAATCTCTCGGTCCAATAAAATCCCCCGCAAACTGGGAATGCCGAATTAGTTGAAGAAAGCACACTCCGATCAAACAATAAACGTATTTTAAGGGGTAGTAGACGAAGGCCCTTGCTTGCACGTCCAAGCCATACACAGGAACCAGGCGTCATCTCTGTTGGAATTCCGGCCATAGTCGTCACACCCCTTCGTTGATGTCTTATACTCTCAGATATTAAGATTGGCTGCAATGTAGGGCCCGGAGGCGGGGTTTTCTTCCACGTTCCTGAAAATAATCTGTAAGGTCTTCTCTCCCCAGTGAACTCCGCAGTAATGGGATTTGGACTAGGGGCTATTTCGCGGAACAGCAAGTCCGCATAGAGACATAGCGCTGGGTCCACATCAGCGCGTCCGTTCTGCCAGTCAGAGTGCACTTAGGGCATTGGCCACTATCCGGTGCGTTATTAGCGGAAGGCGATCTTTCGTAGACACCATAGGACGATTTAGACTTTCTTTTCCCTAGTGTACAAACACTCCCGTTGGGGCGTCCGTACTCTTTCAAATACTATTCCAATGCCTGCTGTGAATCCGGACCCCTCCCTAGTGCCGATAGTCGTTATGAGACAGAACTAGCTCCAGTTCCCTGAGGTGCGGAGATAGATTTGCATCTTAAGGTTTAAATGAGGCTGGAGCCCTCCGGTAGCGATAATGGCTTCCCCCCGGTCCTACACATCTATCCCGCCCAGACTCCGGAGAGCCGCTGCCGATATGCACCCCTGCAGTGGCGAGGCGATGTATGATTGTCAACTCGCCTGCGACGTACTAGAAATAAGGAAGTTTGTCATTCGATCCCGAAGCACAGTTTAGCAGCACTGAAGGAGGGTCCCAGCTAGGAACGGCCACATTGCTTAGTCATCTCGTCCACAATCTTAGCTCATAGGCGTGAGATCCGCGCGCTACCGGTCGCAATACGCTTATTTGTTTTCCTATGATAGCTACGGAAGATCCAAGTAAACTCCTGGGGCGAAGTAAAATGTTTGAACGACGAAGTTGTTGATTTTGCAATTAAACCTTCTCTGTTAATTATGACCAGAGGTTTGTCTCGTCAAACTGCATCTTAGGCCAAGCCGCTCTGTACTTCTGGTGTCATTCCACTGGCATTTGTAGGGTGGTTGACCGCACCAGTCATTTCCCGCGTACCAGGTGTTCCGCTAAAGGACGTGCATATACTTTTGAACATTCGGCAGGAGTAAGTCGTTGCCGTCCCAGTGTCATAAGAGGACAAGATAGTTTATCAAACAATGACTGACGAAACGGCTGTTGTCGCTGTTCAACGCCATTCACTTCAAGGCTAGTTCTACAGTGTGTTGGATTGATTGACAGCGGATGGTTTGTGGGGATATAGCTCCATAGGACTGCGGGATTATTGTATCTCTAGCCCTCACCTTTCGTCTTTATGTATCAGTCAGTTCAAAGGCGATGGCGACAATATCTTTACAGTTTACCCACGGGGGCCGGTCAAAGGTTGAATTAGATTAGAAGGGGTAAGATTCGATGATAGGTCTTCATCAATGCGTGTGATCTTGGGTCTCAGGTGTATTGGCCAGAGGACATTGTAGGGAACAGCTAAGCACCTCACCCTAAATTTGAACCTGGCAAGGTTTAATAACAGACAAATGAAGACGTCAACTCCGTGCCAACCCCGAAATTCATCACAGTTGAAGACAGCTACCGGCCCAGCTAATCAGTCGGGTATGGGTACTCGTAGGCACCTTAGTCATAGGTGATTCGCCACGATACTCGAGGCGAACTGCGGCCTCTGGATACAGCTAGAGTCCCAGTTGGAGTAAACTGTCTTGTGTTCTGACTAGGCTATTGAAAAGCGATATCACGATCATAGTGCCCGACCGTGGTGGCATAATTCACCTTTCGCATCGATTGTGAGAGTTGAATACGACTCACTCGACCCATCCCCTTAGTTCGGACAGCTGGACCGTAAAAGTACTAAAATCCTGAGCTAATCTGCCAGACACCAGGGAGGAATGACTAAACCTTCAGCCCAAACTCACATCAAGAATGTGACAGCGGCCCTCTGCCACAGACTGCGACTGTGAGCAGATTATCGGCTATTACTTACATCGGCAAGCATATTCATTATAGCTGGTTTCCAAACGTATTCAAACAGAACGGGAATTCGAGAACCTAATAAACACGGTCATTGCCAAGATAATCTGTTAAGGGGGGTTTACTCACGCCATCGATCTAACAGCGAGCAGTATGGTGAAACGCGCATATAGGACTTTACGGGTTTTAGCCGAAAGGTCCATAGCAAGCTTACGTACGGAAGTGGCTGTTTGGTACTCGCTGCCATTAGCGTGTCTCCCTTGTATCTTAGTTTCATATCTCGCCAAGGCAAGTAGCGGGTCCTTAGTAGGATGATCGGGCTATCTGACCAGGCGGGTTTAGCGTTGTCCTGTGAATATTTTCTACTTGTCTCAGACGGAGCGCCTTTCCCCTGTCATGAAAATTACAACTTACATTCAACCTGACCCCCTTGTACGAGATTACGGCCTGCCTGAGCTGCCCGGTTCCTGACGGAAGTACCGGTACGCCATGAGACCCTCCCCCTCAGACTTCACCATTTCTAAGATAACACAGTCAAAAAGTCTCACAGTCGCATTGCGTGTACTCATTAGTGGCACTCGCCATGAGATCGCGCAGCCATACACTTCCTGCTTATGTATGGGTGCTTTAATAAACCTGGTAAAGGTGCAGAGGGAATATGTAATTGAAGCGTCTCCCTCAACGCCGATAGTAGTGTAGGATCCCCAGTGTCTGTGTACACCCCGGAGGGATCGATCTCGTACGGTTACTTCAAGTTAGGTATAATTTCACTGGGTTCCTGTTAGCGGGATGGTACTACTTCAATACAAACTCACCCCAATTAAATGGGGAAGATGTATTGGACCCGTTAACTCGAACGTGTTCCGCGCCCATCCCAGT'))
stringy = """CGCAGGTTCCTGTCAGTGTCTGCTGCCACGCCTGATTTCGTAGCCCTATAGACATACTCAACTTATGGCCCCCTCACTGTCATTACCACGCACTAATACAGGCGGGGTTAGATTACTATACGTGCTATACGTCCTAGAAGGGTCCAGAGTCCATGAACCGATCCAATCGCAAGCAGACAAATTTCGGAGGCATCGTAAGAAGTATCCACATTGACGGTGGGTGAAGTCTGCATTGTAACCCTCATCATAGGCTTGATCGGAGTTAACCACTCATATGACACAGTGGGGGCCAGGAGGTGGGAGGTCCTGAGTATACATATCAGGCACCAAAAGATTACGAGCCAGCTGCGGCCTTATTGTTGAGTAACGGTGGTAAATCGGTCGCCAGGGGATATCCACGCGACGGTCGGTCCGCCCCGCACTGGAGCTTAAGGCTTATGAGTCAGGCGAAAATGATCGATTGGGAGGAAGCATGGATCGACGTGTCCCGTTAACAGGCACGAAAAATCAATGGGCGAAATCACCCTGTCATGTCCAAGAACAGCTAGGTGATGGCTGAAAGGGCAATCAGACATGGTTATGGCCGGAAATATCGTCGAGATTCGAAAGTGAACATGATCGATCACCACTCTCCCCTTCTGTATGGAAAGTTAAGGCAGAACAGTCGGAGTCTCTCACAAAAGTCGACCCCACAGCCGGGTCCATTCTGAATCTTGAAACATGAATACCTAATGGAGCAGCTAAACAGGTGCTACGCCCTATTCGCTTGTTCGTATTCTGTTTAAGTGACCTAGTAGGATCTCGGAGTCTTCGAGGGCTTTCGGGGGTCCGGTCCGGTGGCTCTAGCTTTTTTGATTCTAAGGCTTGTCACTCGGAAACATCCCGCGATAGGAGATACACCTAGCAGTATTTCACAATAGTAGTTGGTAATAATTGGAGCTGGGGGGGGAGTACTAGAGGCGCGCGGGGCCTAGACTAACACTACGGTGGCTCAGGTCACACTATATCTGGTGCATCGTGACACCGACCGTGAATCCATGGGGAAACACTGTCTTGAGTAAGAGGATCCATCGTTGAAACGGTAAGTGGCATAGTTACTCTGGGCGCCCGTGGGTAGTTACTACCGATTGAAAACATTCAAGTACATTACAGGACACGTGGACGGGGGCCGCTTAATGATGATAATGGGTCATTGAACGATGGTTCTGTCAAAGAGGGATTGGAGACTATAGTTTTCCGGCGGTAATACCGAAAGTTTCTTATATGATCACCACCATCATACCCGTCGGGATGGTACTGGGATGGTCAGACGCGCGAATTGAGGCGGTTCCCACTAAGGTACGTAGATGGAGATAGCTCGTTAGAGAGGTGCACTGTTGAACACGACGAGTTATCAGGTGCGGGCCAGGTCTCCCGGTATGTCTTGATCACGGAGCGCGTTGTTCCATAGGAAAACCTTCCTTCTAGCGGAATCCTGTTCACAAAATCTTAATTTCAATTAAACCTCCCTCTAGATTTACGGGCCGCACCAAACTGAGGGGGCGTGTGACCTCGAGAGTAGTAGAGCCGTCCAGCATCGAACAATTAAGTACCCCAGCTCCGCGACAGGAAAATGCGACCCTGCTTCTGCGTACGCATCACTTGGCTGGTCATGTCCCCGTCAAAGATGCCAGCATCTACAATTGTTGTCCCGAGTTATGACATCTTGCACAAATGTTGCGCGCAGGTTTCTCGTCAGTTCAAGGCACTTCATCTTTTACGACCCAGTTGGCCCTCTCGGTCTTGACGACCTTGATGCTATCCTCAGACTTACCTATTAGACATATCAAATCCTCCCGCAGATGAATGCTCCCCCGACAGTTAAAGGACGAAGCCCAAGACATAGAACTGACACTAATCTCTAGCAAGCCTCTCCGAGCTTCGAGTGACGGTGTCTGCCCGATCGGCCACCGCCTCCATTCAGTGTCAATCAATTGCGAGCGCCAGGATAGGAGTTTCTCTGATAAGCAACATTGCGGGAAACTTTCAGGCTATCCCTTACCACACTTTTTATGATAGATCAAACATACGGACAAAGAGCCGCGCCGGGCTTCGTTCGTTTAGCCCCAGAACAGCCCGTGGTTGCGACACTCCGACAAATGGTAGCGAATCAGCCCTAGGACGGTAGGCTGTGCAGCTATCTTGTGTAGCACTCACCATACCCTGGGGTAAATGGTTGCATCCGTACTTGGGCAGGAACGGCCTCGATTGCACTGAATGCGTTTGGAATATTTGCCAAAATCGAGCGTCTTGTCCCTAATGAGGGCAAGTAACCTTCCCGAAGGACCTACGCTTGTAGGGTAGTGATGGGTGCGCAGTCGGACCCCGAGGCACTGGCGCGTCGCTTATGTTCCCGGAATTTTCATGGGGCGCGAACATATCCATTTTTCCTGAAAGATAGATGGGCGACCAGGTAAATCATAGCCCAGAGGCACAATTCGCCGCGATAGCGACACACTTACCAACGGACTAGAAAAGTCAAAGCAATCGGGCCGACGAGTCGATCTTGCCAAATAACGAAATTATGCGGTCCTGAATCAGTTCCTCACGAGAGTAAGTATGCCTGTAGCCCAGACGGATCACGCGTCTACAAAAGTTCTCGGGACGGAGCTCAGTCCCTGAGCCCCCGGGCCACAGTCAAACAAAGCGCGAATCAATTACCGACCCACTTCGTACCCGAATGAGGCGATTGCTTCGAGTTTCGCATGGCGGTGGGGTAAGGAGAAAACCAGAGTCTTCTATCAACAACCCGTGGACGCGGGTATCAGAGTAGGCCCGCCGGTCGGCTCTAGATAAGTTTCATTCGCCGGGGCTAGTCGAGGGTCCCCCTAAGGATAATTCGCAGGGCTTCCGGACAAAATGGGTACCTTACAAATGGCTGTGGATCACCCCGCGGTGATTGCTTGAGAAAATAACTGGGTACGATGAACTCCTACTAGATCCATTCTGACTATACGCAATTCGTTAGCATTATACACGAAAAAAGAGGATTGACTATCAATAAGAGACCCCTGCCGCTTATGCTGGGCGTGGACAGCGGCACACGCAGGATTACGGCTGGACTTCTCGGTCCTACCTCGCTTCTTTCGTGCAGTACCAGTATCCTTATACACCTGTAGTACCTCCCCTAGTGTATGTCGAAATGAAAGTGATATTCATCGTATAGGCTATAAAAGGTTTCTTCTGTAACGGGTGCCAAACCTACACTCGGGTACCCTTTATCCCCAACAACGTATGCAACACTACACCGATCGAATTAAGCCCTGTGTCTACATCGAGCCGGCCGGCGGCATTTACTAACAGATACTGCTCCGGCACCGAACTTCCCTATTTGGCCAGGAGTACGGTAGGGGGCTGTCGTGAAATACCAGCGATGCCATCGAACCGTGTCAGCCGGAGTAGTGCGTGTCCCTTGTGGGGAAGAGTGGACGCTAGAATTGCACGTGTCCTGCACTTCTCAATAACGATAATTGCCTAGACACTCACGCCGTATTCCTGTGATTAACCCTTGTCCCTGGCGGCGAGAGTTTGCCGATCGTCATAAATTGGTGGGTTAGACCCGAACCCTCCCACGGATTACATAAGAAGTCCGCCGCATCTGTTATCTTTGCTAGCCTAACGGAGTTATTTAGGTCCGTACTGTGTCCGCATCGCCTCCGCACTAGTAAGGGGCTACGTTAATACCGGACTCTATAAGACCGCATTGCTAGCATTTTAGTCAACTGTTACCGATACGCCTAAGTCTGCCATCGAGATCAGCCAGCAGTTTGCTAAGTAGCAACAGTTGTTAGCGTCAACATCCTTGAAATTTTAAGAATAATGGTTTACGAGAGATTTTGTTCAGCTGCATCTCCCAGCAACTCCACATAGCAATCGATAACTCCCTCTCTTTAATAGTTGTTCTCGTATTCACTCAAGAGATACCAGACCCCGGTATGTAAAAACGAGACACGTAAACCGGGAGTTAGACTTTGTGCCTGTCGTAATTAAGCATCTATAAATTGGCCACCAAGATTCGAAGCTCCTCGCAGGTGTCCCACCTGGTTCAGTGGATCTCTTTAACACTAGACGGGCACGCCGTTGTGGCGGATACGCGATGCCTAGTCGCCGAACAATAACGATTTGTTTACAAGAGGTAGCTGTTTGCCGCCCAGGTAAGTTGCAACCATAAGGTGGATGAAGCTAAGACGAGACACCGCCACTACCGTTACGTACGTCGTCTTGCGCTTTTGCGGGGCATTCAAACGAATTCTATGTATGTATGCACTGATAAGTTAGACATGATTAGTCCATAACGTGCTACCTCATCGAGATGCTTTTCCCATAACGATGCATGCAGGAATTACGTTATATATTGGGTGCGTACATGCAGCACAGTCTATCTCATAGCTAGTATTTATGCCGTTCCGTGGCCTGAGGTTTCCAATACGGGTTTCCTGACGGTATTGTGGTAAGACGTCGATTCTGGGTCGGCCGTCTTAGACTAGGAAAGACCAAGCATCTGCAACCACTGCTACGCCGTTCGGAGTAGTAGGCTTTCTGTTCAGAGTTTACCTTATTGACATGGAAGGAATAGGGCCATTGGTCTGGAATGGGGGTTCCATATCGCTTGTCTCTAGCGCCGATGCCCTAACCGGTCAATGAATATTTAACGCAGTCTGTTATGGACCTTAACGCAAGTACAACAGGACGCTGCACCGGACCTGCTGCCTGGAGGCGTGTTGATACTGATCCATACGAAACACATGTTCAATCGAAAAATCAGCCTGAACAAGCCGCCAAGACGCGTGAGATAAGGCCTCTAAGACCTAACAGAAAATTCCTGAGACAAGCAACATGGGTACGAAGTAGTGCCGAGGGTTGTTGTCGGGCCAAGCATACGCCTCGAACAAATTGTATCTGCATAGAATTAAGAGTACCGAGCGTCAGGGTACACTCACCTACGATGCATGTGTGGGGGC"""
df = pd.Series(stringComposition(100,stringy))
#ans = ' '.join(df.sort_values().values)
ans = ' '.join(df.values)


txt = ans
f = open('data.txt','w')
f.write(txt)
f.close()

#%%
"""
String Spelled by a Genome Path Problem. Reconstruct a string from its genome path.

Input: A sequence path of k-mers Pattern1, … ,Patternn such that the last k - 1 symbols of Patterni are equal to the first k-1 symbolsof Patterni+1 for 1 ≤ i ≤ n-1.
Output: A string Text of length k+n-1 such that the i-th k-mer in Text is equal to Patterni (for 1 ≤ i ≤ n).
"""

def PathToGenome(string_kmers):
    kmers = string_kmers.split()
    start = kmers[0]
    ends = []
    for kmer in kmers[1:]:
        #print(kmer)
        ends.append(kmer[-1])
        
    return start + ''.join(ends)
stringy = open('/Users/brian/Downloads/dataset_198_3.txt').read()
#ans = PathToGenome('ACCGA CCGAA CGAAG GAAGC AAGCT')
ans = PathToGenome(stringy)
print(ans)


#%%

"""
Code Challenge: Solve the Overlap Graph Problem (restated below).

Input: A collection Patterns of k-mers.
Output: The overlap graph Overlap(Patterns), in the form of an adjacency list. (You may return the nodes and their edges in any order.)

"""
from collections import defaultdict
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]




def OverlapGraphProblem(string_kmers):
    d = defaultdict(list)
    
    kmers = string_kmers.split()
    
    for kmer in kmers:
        suffix = kmer[1:]
        for kmer2 in kmers:
            preffix = kmer2[:-1]
            if suffix == preffix:
                d[kmer].append(kmer2)
                
    
    return d

def printOverlapGraph(d):
    ans = []
    for key in d.keys():
        line = key+': '+' '.join(d[key])
        ans.append(line)
    return '\n'.join(ans)
stringy = open('/Users/brian/Downloads/dataset_198_10.txt').read()
#stringy = "ATGCG GCATG CATGC AGGCA GGCAT GGCAC"
#ans = PathToGenome('ACCGA CCGAA CGAAG GAAGC AAGCT')
ans = OverlapGraphProblem(stringy)
#print()

txt = printOverlapGraph(ans)
f = open('data.txt','w')
f.write(txt)
f.close()


#%%

"""
Code Challenge: Solve the De Bruijn Graph from a String Problem.

Input: An integer k and a string Text.
Output: DeBruijnk(Text), in the form of an adjacency list.
"""

def OverlapGraphProblem_DeBruij(string_kmers):
    d = defaultdict(list)
    
    kmers = string_kmers.split()
    kmerpairs = [(i,j) for i,j in zip(kmers[:-1],kmers[1:])]
    
    for kmer1,kmer2 in kmerpairs:
        #print(kmer1,kmer2)
        print(kmer1[0:-1],kmer2[0:-1])
        suffix = kmer1[1:]
        preffix = kmer2[:-1]
        #if suffix == preffix: #pretty sure this if statement isn't needed
            #d[kmer1].append(kmer2)
        d[kmer1[0:-1]].append(kmer2[0:-1])
              
    k = len(kmers[-1])
    #if kmers[-1][1:] == preffix:
    d[kmers[-1][-k-1:-1]].append(kmers[-1][1:])
    
    
    return d

def stringToDeBruijin(k,text):
    kmers = stringComposition(k,text)
    print(kmers)
    string_kmers = ' '.join(kmers)
    print(string_kmers)
    ans = OverlapGraphProblem_DeBruij(string_kmers)
    print(ans)
    return ans

def printDeBruijin(d):
    ans = []
    for key in d.keys():
        #line = key[:-1]+': '+' '.join([i[:-1] for i in d[key]])
        line = key+': '+' '.join([i for i in d[key]])
        ans.append(line)
    return '\n'.join(ans)


stringy = open('/Users/brian/Downloads/dataset_199_6.txt').read()
#stringy = "AAGATTCTCTAAGA"
#ans = PathToGenome('ACCGA CCGAA CGAAG GAAGC AAGCT')
k = int(stringy.split()[0])
ans = stringToDeBruijin(k, stringy.split()[1])
#print()

txt = printDeBruijin(ans)
f = open('data.txt','w')
f.write(txt)
f.close()










