#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 20 14:08:34 2022

@author: brian
"""

import numpy as np

"""
PatternCount(Text, Pattern)
  count ← 0
  for i ← 0 to |Text| − |Pattern|
    if Text(i, |Pattern|) = Pattern
      count ← count + 1
  return count
"""


def PatternCount(text,pattern):
    count = 0
    
    for i in range(1+len(text)-len(pattern)):
        print(text[i:i+len(pattern)])
        if text[i:i+len(pattern)] == pattern:
            count = count + 1
    return count

#print(PatternCount('ATGCAGATTGCAGATACGTTGCAGATTCCTGCAGATTGCAGATTGCAGATCTGCAGATGTTACCACGCCGCTGCAGATTACTGGTGCAGATCGCTGCAGATGTTGCAGATCTGCAGATATGAGATGCAGATCTCAAGGTTGCAGATGCAGACATGATTGCAGATAGTGCAGATTTGCAGATTGCAGATGGCGCTGGCCCCGTGCAGATGCTGCAGATTCTACCGTGCAGATCCTGCAGATTGCAGATTGCGTGCAGATGGTGCAGATTGCAGATGTCTGCAGATCTGCAGATTGCAGATTCGATGCAGATGTGCAGATTCTTGCAGATCAGACCCCGTGCAGATTCATGCAGATTATTGCAGATTTGCAGATTCGCTGTCATGCAGATCCAGCATGCAGATATGCAGATTGCAGATCGGCCCGTGCAGATCCTACCTAAATGCAGATCTGCAGATTTTTTGCAGATAGGGCTGCAGATTTGGTGCAGATGGTGCAGATAGTCGCTAGGCCGCTCCTGCAGATTAACTGCAGATTGCAGATCAGGTTGCAGATAGATCATTCCGATGGGTATTGCAGATACTAATGCAGATGTCTGCAGATACGCCATGCAGATATATGCAGATCGCTGCAGATTTTGCAGATGTGCAGATTGCAGATGCGTGCAGATCCCTGTTGCAGATGGTGCAGATTGCAGATCGTGCAGATGCTGGATGTGCAGATTCGTTGCAGATAAGTGCAGATGAGTGCAGATTGCAGATTGCAGATTCCTGCAGATCCTGCAGATATTATTGCAGATTGCAGATTGCAGATGACTGCAGATATGCAGATAGTGCAGATATGCAGATCTGCAGATCTTGCAGATTGCAGATTGCAGATCTGCAGATTTTGCAGATACATTGCAGATCTGAGTGCAGATTGCAGATACTGCAGATGTGCAGATCAACGTTGCAGATTGCAGATTCCTAGTGCAGATTGCAGATGTGCAGATTGCAGAT','TGCAGATTG'))


"""
FrequentWords(Text, k)
    FrequentPatterns ← an empty set
    for i ← 0 to |Text| − k
        Pattern ← the k-mer Text(i, k)
        Count(i) ← PatternCount(Text, Pattern)
    maxCount ← maximum value in array Count
    for i ← 0 to |Text| − k
        if Count(i) = maxCount
            add Text(i, k) to FrequentPatterns
    remove duplicates from FrequentPatterns
    return FrequentPatterns
"""

def frequentWords(text, k):
    FrequentPatterns = []
    counts = []
    for i in range(len(text) - k+1):
        pattern = text[i:i+k]
        counts.append(PatternCount(text,pattern))
    maxCount = np.array(counts).max()
    print(maxCount)
    
    for i in range(len(text) - k+1):
        if counts[i] == maxCount:
            FrequentPatterns.append(text[i:i+k])
    print(counts)
    print(list(set(FrequentPatterns)))
    return list(set(FrequentPatterns))
    
frequentWords('ACTGACTCCCACCCC', 3)
        
"""
FrequencyTable(Text, k)
    freqMap ← empty map
    n ← |Text|
    for i ← 0 to n − k
        Pattern ← Text(i, k)
        if freqMap[Pattern] doesn't exist
            freqMap[Pattern]← 1
        else
           freqMap[pattern] ←freqMap[pattern]+1 
    return freqMap
"""

def frequencyTable(text,k):
    freqMap = {}
    n = len(text)
    
    for i in range(n-k+1):
        pattern = text[i:i+k]
        if pattern not in freqMap.keys():
            freqMap[pattern] = 1
        else:
            freqMap[pattern] = freqMap[pattern] + 1
    return freqMap

print(frequencyTable('ACTGACTCCCACCCC', 3))

"""
BetterFrequentWords(Text, k)
    FrequentPatterns ← an array of strings of length 0
    freqMap ← FrequencyTable(Text, k)
    max ← MaxMap(freqMap)
    for all strings Pattern in freqMap
        if freqMap[pattern] = max
            append Pattern to frequentPatterns
    return frequentPatterns
"""

def maxMap(freqMap):
    maxest = 0
    for value in freqMap.values():
        if value > maxest:
            #print(value)
            maxest = value
    return maxest

def betterFrequentWords(text,k):
    frequentPatterns = []
    freqMap = frequencyTable(text,k)
    mymax = maxMap(freqMap)
    
    for key in freqMap.keys():
        if freqMap[key] == mymax:
            frequentPatterns.append(key)
    return frequentPatterns

print(betterFrequentWords('TCGAGAAGCAAGCGGTTCGAAGCGGTTCGAAGCGGTTCGGTTTACTAAATCGAGAAGCAAGAGGTTCCTCGAGAAGCAAGAGGTTCCAAGAGGTTCCAAGCGGTTCGTCATCGAAGGAAGCGGTTCGTCGAGAAGCTCATCGAAGGAAGCGGTTCGAAGAGGTTCCTCATCGAAGGTCATCGAAGGGTTTACTAAATCGAGAAGCTCGAGAAGCTCATCGAAGGTCATCGAAGGAAGAGGTTCCAAGAGGTTCCTCGAGAAGCTCATCGAAGGTCGAGAAGCTCATCGAAGGTCGAGAAGCGTTTACTAAATCATCGAAGGTCATCGAAGGAAGAGGTTCCAAGCGGTTCGGTTTACTAAAAAGAGGTTCCTCGAGAAGCTCGAGAAGCAAGAGGTTCCTCATCGAAGGTCGAGAAGCAAGCGGTTCGAAGCGGTTCGTCGAGAAGCAAGAGGTTCCAAGAGGTTCCAAGAGGTTCCAAGAGGTTCCAAGCGGTTCGTCGAGAAGCTCATCGAAGGTCGAGAAGCAAGCGGTTCGAAGCGGTTCGTCGAGAAGCTCGAGAAGCTCGAGAAGCTCATCGAAGGTCGAGAAGCAAGAGGTTCCTCATCGAAGGAAGCGGTTCGAAGAGGTTCCTCATCGAAGGTCATCGAAGGTCATCGAAGGTCATCGAAGGAAGCGGTTCGTCATCGAAGGGTTTACTAAAGTTTACTAAAAAGAGGTTCCAAGAGGTTCCAAGCGGTTCGGTTTACTAAATCGAGAAGCTCGAGAAGCAAGCGGTTCGTCGAGAAGCTCATCGAAGGTCGAGAAGCTCGAGAAGCTCATCGAAGGAAGAGGTTCCTCGAGAAGCTCGAGAAGCTCATCGAAGGTCGAGAAGCTCATCGAAGGAAGAGGTTCCAAGAGGTTCCTCGAGAAGCAAGAGGTTCCAAGCGGTTCGTCGAGAAGCAAGAGGTTCCGTTTACTAAATCATCGAAGGAAGCGGTTCG',14))

"""
Reverse Complement Problem: Find the reverse complement of a DNA string.

Input: A DNA string Pattern.
Output: Patternrc , the reverse complement of Pattern.
"""

def reverseComplement(text):
    mymap = {'A':'T',
             'T':'A',
             'G':'C',
             'C':'G'}
    reverseText = [i for i in text]
    for i,value in enumerate(text):
        reverseText[len(text)-i-1] = mymap[value]
        
    return ''.join(reverseText)

print(reverseComplement('ATCTAATGCCCAGGCCTCGCCGTTCGAACTTAACGCGAGCCTCGGTCCTCCGCGTCATTGAAGTCACGAAATGTTTGACAATAGTCGCACTAACCGAACCCTAGCTTTACAAATTGTGTGTCCTCAGGGGGGTTTGAGCATCGTAAAAGCATGACATTCTCCCACGAACTAGGAATGTCAACCGACCCACCTCGACCCCGGCTCTTGTGAAGTGAGCATATGTGGCGCAGTCACGACTAAATCGCATGGCCATGCCTTCTCCGGCTTAATTTCTCGTTCGCCACGGTACTCAGCCCTCGTCTGTGGAGGAGAGGTCCCACTACGCTTTATTGTGTAAGAGATACGTAACTATTTATTAGCCTTAAACAACTACGTAATAGACGGATCCCCAGTCACTCCCTCAAAAGCTGAGAGGGGTGCTTCCATCCATTTGCGTTCTCTAGAGTAGTAAGCACTCCCGTATGACGCCTTCGCGACCCTGGGGTGGAGCGTCCATAGCGGGTGTTGCGATAGTCGATAGACGTCTTAGCTGGACGACCATTCGCTACCTACAGACTATGTATAGGGAGTAAGTGCGTCACTGGGGCGAATACCTGCGGAAGAAAGTACCGACCCTCTGTGACCCGAATTGGCGGCGTTGAGGATCCGCCGCGGCCAGGATTCTGCCTGTCAACACAGAAGACATACGCGCTGACCTTTCCTAAGTAAGCCCCAGTAAGAAAATTATCTCGGATGTGGGATGGTCGTATCTTAGACAATACGGATGAAGGCGCAGGCAGGACTTGAATCCTATGCATGACAGTTGTGCTTCTCCGCTCGACATCGATTGGCCCTTTTCCCGCTTGTAAACGGGATTGCTGGGTCTTTCATTCGGACTCTCTACCTGGATACCGGCAAGTCCACGCCGAATTAGTCGGAACTTCCACAGCCGTTCCCCGCAGTGATCCGGGTTTTGAGGTGCTATACATCTGATAGTTTTCGTTGTTGTAGTTGCCCCATATCTTCCGCTTAGCGTCCGCGCCTTATGATGTAGGGCTCTTATCTTCCTTAGAGTGCGTTCCATATCATGGCCGTAGATATGTAATAGTGCTCAGGCGAGTCAAGTAATTAGGATCAATAAAGCCTGCTTACGCGACTAATAGCAATTTCGCTACGCCCTTCACGCAGCCACCGTGATAAACGTCGGCTTGTGTTCGTATACTTCGAGACGTCAATATGATATTGAACCGTTCTGCGTTATCTTATGTGCAAAAAGAACGTTAGGATCCTCTGCAGGCTTATAGCACTCCCACGCCTTCTGTCGGGGTGGGACCGTAGACGCCGTGCGAACAGAACTACTCAAGGAATCTCACTCTATTTATAACAGTGACCCGCTTGCTAGTAGAATTGGAGATTGGGTGCAGCTTCCGGTGCGTTGGCACAGTATAAATTGATTTCTCGGGCCTTTCAGCTGTGGGCTCGGTGCGTGGCGTCCCAGGCACGCGGCACGGTGCACTGGCTCTACCTCGAGGGTGCGTTGCGAAAGGCAATCACCAAGGTGAGTCACACATACGACCAGTGCCCCCTATGTAACTCGCGAGCTTGCCGGGCTCTAGGTAAACTCCCGAAGGGGAACAGTCCCCTTAGGAGTGGCTGAGGGAACGAAAGCTTCGGGGTTCTTAGGACGCAGACTTGAGCAACTATATAATGTCGAATCGGCGATGTGATAAGAGGGGGCACCGGTCTTCCTTCACCGTAGCCGAGTTAGACTTCAGATTCAGTGCACTCCTACTCCTGCCAAGTCGGCTTATCAGTGTAGGACAGCAGCCGCTTAAACTCCCGGCGCTCAATATATGTGACCTAACGAGCACGACGAGGGAGAATAGGGAACGGGTCCCAAGCACTAAATGTCCAATTACGATTGACTTACGCTGCATACAAAACAATCATCTGTAGACGTGCATAGCCCGTATAGAAGGGTTGATGGTGGATGTACACAGGAAACTCTCCGCGGTCTGGGCCTCCAGCGGATACAAGGTCACTGTAGGAACTAGGATGCATCCCGGAAAGACGAGTCACGACCTGGTTTGAAACGGGAGTCTGAGGTCTGGAAATCCACCATTATAGGCCAAACATCATAAGCAACATTTAAGACAATCAGGTGTAGCGTTATTGGATCTAGAGGACACTTAGTTACGGTCTGTGGGGTCATTGAGCCTACCGCACGACAGCCTTGTCTCAACTCCGCCGGTTACTATTGCAACGTCAGGAACTATATAATATATCGCTCGGGTAGCTGACGATTCTTTCCGGGGCCGATGCATTAGGGCAAACGCAGTGCCGCTCGAAAACCGTAGGGCCTCATCACGACTCCATCGCGCCGTTACCGCTGAAAACCAAGTCGCTTTGTTACAAATATTCCGGACTAGATCCAACTTTGCCCTGAGGTTTATTTGCGCGGCGTACGTTGAATGGAAGATATAAAGCCAATACCATGCGCCTTAATCGAATTAGCGCGTCTCGGGTCAAATGTTCTATTCAGCGAGAGGATTTCCATGCCCCGCAAGACATCAAAGTATATGCTTCGACGGGTGGTGTATGTTTTGCGGCGCCGATGTCCCAGATTCTGCTATGTGCTTTGAGGCAAGCCTCGCCATGAAAGCCTGCATGAAAAAATGGAATACCGTAGAGGGGACAGCCCTCATCGGCCTTCCTACCGGTTGCGCGACTAAGTTGAACTTGCGCGCCGGGATTATCTTTATCTGCGAGCTTGCTTTACGTGACGGATCGGACGGAGGCAAGAGGCTCTGAACTTGAAGCCAAAAAGCGCGCCAGGTATTCATACAGTGCGACGCGCAGAAAGATCATTCTATGGGCGAAACTTGAGCATCTCGATACCGGTCCTCACTTGGCACGGACCATAGCATCGGGCCACACTATTGTACGGACTAAAGCCCCGGGGATCGTGAGAGTCGCGCAACCTTGGACGACTAATATGCTCACAAATTCGGAACGAACTCAACAAATTTTGGTAGTTTACAAACCCACCGGCAAACCATCTTAACCTATATCAGCCTCTATACTTTGACTGCTTAGAACGATCGGCTGGAACTCGGACTTGGAGTGGGCAATAGTCAATGGTAGACTAATCCTCAAAAGGCCGGGGCCTCTAACGAGGATGGAGTGGCACCACCCTCGAAGAGTGAGTGGCCAGGGCTGTAGTAGTAAATCGACCATTGAGATTAGTACACTAATGTGAGTCCGATCCCTTGCGTAATCTGATCGGATACCAGAGTTATGGGTTCCGATTGATTGGGCATAGCGTTTGGTCAGAGAAATCAGGGCGAATGATGATTTATGCTAAAGATAAATAATATAAGGGCATGGGTCGTGTCAGTGAAACCAATACTTATATTGTAACTGTTCACTATACCGTAGCCTATATTCGTGATGAAAGAGGCCTCGAAAGCTATCTTCCCCTCGTTTTCGTTGGCTTCACCGACGTTACGGATACAACACGGGCAGTTGTTTGAGATTGACCAGAACACCAGGACCGGTTCAAGTCGTCGTGCAACTAGTGAATCCCGTGAGTTCGGGCCACTTGTCAATTCCAATTAGTTAAGTACGCATGTACAGTTGCCCAGTAACCCGCTAATCGGGCGATTTGCCTATTGCTCCGAGTTCCTTCATAACACATTAGAATCTAGGAGCTCGGCCCGGTCTCGTGTATGAATCCCCCGCTGATTATTCGAACACGGGACCAACTTAGGGAAATCCAGCTATTTGAAAATTTTAGCTTGCTGGTTCCATTGCAGTACCCGCTAAGTCCTGACGCGACACACTATTGTGGCATTCCAGATGCACCTTATTAAGACCTTTCCATCTGGCCAACGTAGCAATACAACACCGAGCGCTTGATATCAGACATAGTGGTACCTTGAGTCACTACACTTTCAGCATAAGCGTTCGAGAGATAGAGCTTCCTCACTACACGTGTCAAACTATTCATCCTAAGTTGATGACGGATCGAAAATATATGAAGCCGAGAACTTCGCACCTAAGATGTTCACTGTATAGACTGTTTTGTGGGAACTCCCTTAAACAATATGGTCCTAAGAGTTTTATGGGGATGGGTGGTGCAAAATAATAAATTAAATATTTACGAGATGGAGATGGATCGCGTAACTGATGGAAAGGCTGAGCGTGCGCGAGAAGTCGACCCAAGACATCATTCAACTAACGGAAGCACCAGCTACTAAGCTGACGAATGTGTTCCGCCCTGGGAAAATATATACCCTGAGTATGCATACCTAGAATTCGAGGCGGCAATAGAAAGAGCCGGTCACGCAGCAATAGAGCCTCGAGTGCTGATGTGATCTGGAAAACGCATGGTACTGGCGATTGTAGGCGAGTTCCGGCTTACACTAGCTGTACACTCAGACTGCAATTATCTAGATCGATAAACCTCGGCTTGGATGCTAGCTGCCACAGGAACACCTATCAAGAAAACGTAAGGGATCGTGTGATTATTGGAGTTCCTAGGCCTTGACCGCCCACTACTCAATGAGTAGACTAGAAGCGGCTAACTCGACCACAGCACGGGTATTCGCCGGCCCCGGCCAGCTTAGCTGCTCCAAGGCCTAGCCTCAGGATACGGGGTTGGCCGCGCTTCTCATTAGTGGTGTATAACGCGGACTTTAAGGGGCAGACGACTGACGCGTGGCTTCTGACTTATGATTAGTTGATGAAGCTCGGCTAGTTCACGCTGGATAGAGATACGTATCTGTGGGTGTAGCGCACACTAAGCCACGTCAGGCCGTAGCGTAGTCCATACTATTAACTGGTCCCCAAAAGCGATGCGCTCACCCGACCTACGAACAAGCTCAACGGATTTCAGGAACCTACCACATGACTCCACAGAGGTCACGAATAACGCTTAAGCGACTATCCCTCCCTATCAGGGAAGCCTGAGCAGTATCTAAATTACCGCCTCAGGAGGAAGGTAGCGTTCCACGCGAGTTCTGACAGTCCGTCCGGCCCGTGACAGAAGTATTTCAGATACAGAGTTTCGCTTCCATGGAGGTTCACCGCATTTTGCCGCTCTCATTAGAGGAGTTGATTATTCGTTGAGTGGAAGTAGGCAGCCTTTGTTGGCACCTCCTTCGTCGTCTGCGCCTAAAATCCCTTCCCGTGGAACAAGGGAGCGAATTCATCTGTAAAAGTGGTCGCTTGATTACCTTCACGTTGTCTAAACGTAACCGAATTCTTTTTATACATCCACAGCCCAATCAGGTCTGCCCACCGGATTAATACGCTCGATTTTACTCTGGACCAAAGGTATATATTCCGTAAATTGGTCAGTCTGCACCTTAGTCTCAATCTTCTTCTCGACGAGACTACGTCACCTCACCTCGGCGTCCGGTAAGCGAACGGCCCTTATAGTCGTCCTGAATATGCCGCCTGGGAACCCTATCAATGGCCCGAGCTAACGATACTGGATCGTACAAAGCCAGTCTCAGTGATTCCCTGTATCCCCATTATCATAAGGCAGTTATTACGGACTTGCGCAGAGTGGGTCTACACACCCGACAGAGTGGAAACAGAGTTTTGGTCGAATTCTGAACTTGAAAAGAAAGCCGTTCATGGTGGAACGAGTGGATGGCATAGCCGTCCCCTATCTTGGCGATCCGTCCGAACACTCTGAAGTGAGTGTAAGCCAGGGGCCCCAGAATTCTTAGATTTGCATGGCTGTAGTAAGGCGAATGAAGTAGTTTGGTAACACTGTCTTACTCGTTCCGCGCCGCAGGAGCGAGAGCCGCGTGGGTCTGGCCTATGCGGGGCGTCGCGATAAGCCCGCCCTACAATCCCCCTTTGGGATGTGACATTCACATTTCACTCGAGTTCATACCTGGACCGCTAGCAAACGTGTCTTCCAGACGACATGGACTCACTCTGTGAGAAATCTTGGTGCGCGTAGAAGGGAGCTTCCAATTCTCAACGACAACAGAGGCCGCTGAAAATCATTTGATTCGAAAAGTCTCAACGTCTGGGGGGGTCTGGATAGGTGCCAACGAGTCTGTGTTAATTGCAATTGGGATCAGAATGACTCCGGTCAGAGTTCAAACGTGTCTACGTTTAAACGGTCTCATCCAGAGTGCTTGTTCCCGTGTGTAACGGGGAAGTATCTGTCACCTAAGAGAACCAAATTAACAGGATGATCGCATCAAAGTCGAGGCAGAATCCGAAATCAACGCTCGGCAATCGGATTAGACGAGGCACGAGCATCTACATTACTCTGTTATGTCGTGCCAGGGACAGCAGTGGCGGGATGGGTGATCACTTGGTGCCAATTCCTCCTACGTAGAGGACGAACTCGGGTGCATTACGTGGTGCTGACCGCGGCCGCCCCGCGCCGATCTGCGATCGTTATCATCAGTACTGGCTTTCCATGACAAGTATGCAACTAGGGAGCTGCTCCGGCGGGGAAAGTAACCCGTCGATAGCACATTATGAGTCTAAACTTAGGCGCTCGAGCTGGGGCATGGCAATTGCACGTATAACTGGCACTAAGTATTCTCTGGCGCCGCATCAGTTGACATTCGGTCTTAATTGTCCCCCAGGTTCTGGAATAGATCTTTAGACAGATGAGGGATCTACCCCGGCTCCCCCTGCATTAAAGCCTCGCTCCTACCATTCCCCGTGATGTTAGCCGCCCAGGGAACCCTTCAGAGGGGTCTATTCCTTCGCAATCCTTTAGACAAATATTGGCCCTCGGAGTATTTCCCTATCAATATGATGGAGCCACAGATGTTCCTAGAAGTTATGGTCACAGGAGCGGAGTTCTACCGACACTCCTTAGATAGGAAGATACATAGTTTTGAATATTAATCACAGCTAACACGGGTCTGTGGCTGCGGTCGGGTCTGTCCCTATGGCACCGAGTCCCCGGACGCAGCAAGCTCCCCGTTTATCCTCGGTCGAACTCGGTTAAGGTGAGTGGGGTAACACTACTTATGTAATAAGCCTAGCGAAGTCTTTTGTTAAGCTGGATATGGCCGAAGTCCGGTTCGGACTGGGAGAAATATCTTGCAGACATGCACAGTTGGTACTTCAATAAGTAAATATAAGACGAAGATTAGGTAGCGCTCGATATGCAATCGGATGCGCTTAGAATCGCGTGCTCCGGTCCCAGGGGGGGACTTGCTTCAATCAAAGCATTGAGACGCGAGTCTAAACCTCACTCTGAAGGCTGGATCTCTCTCTAGTACCACTCCCACAATGGATAGACGCTATTCAATACGCTCTCCCGTATCAGACCGGTATCGGTACTAGTTCTATCCCTCTGGACCCTACACCCTGTTAGACAAAATTTCATGGATAGGTTGCTGGCAGGGGACCGCGTACAGATCCTCTGGATTGCCCCTCAAATCTCGTTTTTGACGACCTTTAGGAGATAAAACTCAGACGGCGATAGTATTGTGAGTATAAACAAGAAAATCCAGATGTGGAAGGGACCTAGAGAATATGGGCATAAACCGGCGTGGCCGCCAGACTCCAGACTAGAGCGTGAGCTCTTCTAAGGGGCGGACTAGCCATTACCACGCCAACGTTTGGCAGGTAGTTCACCGGCTACGGAAGATTAGTTGATGTCCTATTTGTAAACTGACCTATCAGGTACGCCAGTGCATAAGGAGGACGTTCCTCGGTCCAAGTACGCATGTAACGGTTCGTACAATATTACAACAGAAAGACCTTTGGTATTTATAGCCATCGCGTCACATGCCCAGTCAACCCTCAGGAGCTGGCTTAGGAATCGCCGGGAAATAGCGCTTGTACGATATGCTTTCCCAAGCGTAGCACACAATACAAGGCTATGCGCTTGGTTTCTTGGGCTCGGGCGACTAAATTGCCACACGACGGAGCCCTGTTATTATGCATGCGTCGCCGTCTAAACACGAACTGATAGAGACAAAGCCCCACTTCTCGTAGTGGACTTCAATCTTAGACACAATCCACTAGTCATTGGATTAACGGGCTTAACGATGTTCCGAGGAGAATGGGTTCGAATTTCGTCACACTGGCCCATCCGTCGCCATTAAGTCACTTGCATCGCCCTTTACTGTAATGCTACATCATGTGTGTTTTTCTTCTAACGGCGCTTGGTCGGGTCGCAACTCTCCTTAATAGTAGTCCCTTTACCAGCAGGTCACCCATAGCTCAGTAAGCTAGAGCTAAAACGTGTTTAGACCTACGCTAGCAAACACCGGCCTACTACACACTCCTATCATAGAACCACTAAACCACCGTCATACTGCTATAAATAAGCATCTATACGAGGATGGAGCTGATAGCCGTAACCTTTAGACGTAGTCACAGTGTTTTACTGGGCCTTCGGCTAGCAGGAAATTTATTTTCAGCCTAATGCCATCCCCCTCGCAGCATCATTGTCTGGTAGTCAGGGCTACCCGGCTTCGGCGTTCCATGAAGCTACGACGGTAAATCCCCGAGTCGAGCACTGGCCCTTAGAACTGTCGAAGTAACGCTGTATAACCAGCTCCAAGAGTACGGTACTGGTCCTACCATCCAAGACGTGGCATCAAACTTAAGCCTGGGCCCTGCCGGATTATGAAATGTGGTGCTTTAGACTACCGTCTAAACCCGTCTGTCATCAAAAATGTGCTTCGACTTTAAGTTGCCATAACCTTCAATAGAGCCCTTGCGTTGAGTAGTCCGCGACGCACACCATCTGGTCACCCCACGTGAATTTAGATACCTTATCGATTTTTCTCCGTCTCAGGAATGGCCTAGGGCAAAAAGCCTGGAAGAATTCTACTCGCTAATTGTGGTTTTAGGTTTTGGGTGCAAACAGCCCCGGGGAGATGCCTTCCGCTGTAGAAAAAGCTAAATGTAAATGCAGTGGCCTATGGGATTGTGGTATTTCTACTGTTTTTAGAAATGTGTTGGCGTAGCTGTGAAACTCGAGTTAACCGGCTCTCCCAAGATAATGTCCCGACTTTATTCAATCATGCTTCTCGCCCACCGCTACTGTAGCTACCACATGTGTCCAAGTAAAAGGGGTCTGTGGTCGCGCTGGATGTGACCGGTCTGCACGAATCAACTGTATCGTCTCTTCTTTGTGACCCGGCCTATGTCAGTCCAGCAGGTTCTCTTACAACCCCAACACGTCACACACCACGTCGAAGCATTGCGGCATTAGGGTGTCATGCAGGCCACTACCCGCATTACTGCTACCATTCGAGCAATCAGAGAAAAGCTAGTGAGGCCCTATAGTGATGCTACGAGGGCGGCAACTTTTCGAACGGAGTGTCCGTCCTTAATATAAGCAGAGTAATAGTTTATCAGACTATTATACCACTTGACACGGGGTGGGCTTTTAGCTGCTGTGAAAAATATGTAATATTCGATCCTGTGTTTGGCTGACTGGGTTCAGGGTTGTGGCTGTACAGAACATCCGAAGTGTGTTTGTTCTTAAAACGTACATATCAGGTTAAACTGGCGGAGTGATTGTCCACTTACTCGAGAATTCGATCTGGGCTCAACATACGGTTCGTACTAAGATACGTGCAGGGAGAGGATGTCCCATTCCCCATGGCCATCCATTACCTTTTAGAAACCTTTTCGTAATAGGTGATTCCACGTTTCCAACCATTAAGAAGGAAACTTTTGCCGCTCGAGACCTGTTTAGAACCAGTTGGACTCTGGACTGCAGTGGCCAGGACTTTCTACCATTTTATGAGAACACACGCGGGTTCTAGTCTAACAGTGTGCGCGTCACTCTCCCCAGTCAGGCAGAGGATCAGGACCCGGTTTATCGACCATTCAGTGCGCACCTAGACTCATGGGAAAGGTACCAAGTCAGTTGATTCTTTTGAAGTTAGATTGTCGGAAGCGACATATTATTGGCATGCAATCGGTTGCTGAGAGTATTATCGTTGAAC'))

"""
Code Challenge: Solve the Pattern Matching Problem.

Input: Two strings, Pattern and Genome.
Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.

"""

def patternMatch(pattern,text):
    matches = []
    for i in range(len(text)-len(pattern)+1):
        #print(text[i:i+len(pattern)], pattern)
        
        if text[i:i+len(pattern)] == pattern:
            matches.append(i)
    return ' '.join([str(i) for i in matches])

print(patternMatch('AGAGAGTAG','GTAGAGAGTTCACACAAGTGTCTGATAGAGAGTAAGCCCAGAGAGTCTCGCAGAGAGTAGAGAGTAAGCGGCAGAGAGTGAGAAGAGAGTAGAGAGTCTTTAAGAGAGTAGAGAGTGATAGAGAGTAACTCAAGAGAGTGAGAGAGTCCTGAGGGAGAGAGTCAGAGAGTGAGTAGAGAGTAGAGAGTACGAGAGAGTAAAGAGAGTGTTAGCACCAGAGAGTCTAGAGAGTAAGAGAGTAGAGAGTTAGAGAGTCAGAGAGTAAAAGAGAGTCTGGCAGAGAGTAGAGAGTGGTAGAGAGTGGAGAGAGTAGAGAGTAGAGAGTAATCACCAGCCAGAGAGAGTAAGAGAGTCAGAGAGTGGAGAGAGTATAGAGAGTCAGAGAGTAGAGAGTAGAGAGTAGAGAGTTGAGTAGGGAGAGAGTAATAGAGAGTAGAGAGTGGCCAGAGAGTACCCCAGAGAGTAAGAGAGTCGCCAGAAACAGAGAGTAATGTTAGAGAGTTAGAGAGTGACAGAGAGTACCAAGAGAGTGAGAGAGTAGAGAGTTCGGGTAAGAGAGTAACAACCAGAGAGAGTCAGAGAGTGAGAGAGTCACACTCGTCTAGAGAGTACAAGAGAGTTAGAGAGTCTAGAGAGTGGAAGAGAGTACAAGAGAGTCCGTAGAGAGTAGAGAGTGTACGAAGGAGAGAGTAGAGAGTAGAGAGTTAGAGAGTGCAGAGAGTAGAGAGTGCAGAGAGTTAAGAGAGTCTCTAGAGAGTGAGAGAGAGTCTAGAGAGTAGAGAGTTAGAGAGTTGTTAGAGAGTAGAGAGTAGAGAGTAGAGAGTCAGAGAGTATAAAGAGAGTCAGAGAGTACTGAGAGAGTCGTCCGTAAGAGAGTGGAGAGAGTAAGAGAGTTAAGAGAGTATCATTAGTTAGAGAGTTAAGAGAGTAGAGAGTCAGAGAGTAGAGAGTCGAGAGAGTAAGGATGAAGAGAGTGAGAGAGTGAATATTAGAGAGTAGAGAGTGAAGAGAGTTAGAGAGTAGAGAGTAAAAAGAGAGTAGAGAGTATGAAGAGAGTTATACGTAGAGAGTGGACAAGAGAGTAGAGAGTGTGCAAAGCAGAGAGTAGAGAGTCCCGACAGAGAGAGTTAGAGAGTTAGAGAGAGTAGAGAGTGGAGAGAGTAAGAGAGTAGAGAGTTAGAGAGTCCAGAGAGTGAAGAGAGTAGAGAGTGACAGAGAGTGCACCCGTCGGTAGAGAGTCTTAAGAGAGTCCCGGAGAGAGTCAGAGAGTAGAGAGTTGTAAGAGAGTTCCTTAGAGAGTAGAGAGTAGAGAGTAGAGAGTTAGAGAGTAGAGAGTTGCGTAGAGAGTTAGAGAGTGGAGAGAGTCACTATTCAGAGAGTTCAGAGAGTAGAGAGTTACTAAGAGAGTTGTAGAGAGTGAGAGAGTCATAGAGAGTTGCGCGGAAGAGAGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTTGTAGAGAGTTTAGAGAGTGGACCGTGAGAGAGTCTAGAGAGTTAAGAGAGTCGAGAGAGTGCAGAGAGTAGAGAGTTAAAGAGAGTAGAGAGTTAGAGAGTTGTTAGAGAGTCAAGAGAGTAGAGAGTAGAGAGTTCTATTAGAGAGTAGAGAGTTAGAGAGTAGAGAGTCAGAGAGTCAGAGAGTACACCGTACAAGAGAGTTAGAGAGTAGAGAGTGAGAGAGTAGAGAGTGAGAGAGTTTTACAGAGAGTAGAGAGTAAGAGAGTGAGAGAGTGAGAGAGTGAGAGAGTAGAGAGTGGGGGCAGTTGTAAGAGAGTGAGAGAGTCAATAGAGAGTGATAGAGAGTTAAGAGAGTTCCGAGAGAGTTCATTTAGAGAGTAGAGAGTTTTATTAAAGAGAGTAGAGAGTGTATGAGAGAGTTTTAGAGAGTTAAGAGAGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTGGCGAAACAGAGAGTAGAGAGAGTAGAGAGTCTGGTCAGAGAGTAGAGAGAGTAGAGAGTAGAGAGTGCGCCTACAGAGAGTTTCGGAGGAGAGAGAGTTAAGAGAGTAGAGAGTCAGAGAGTAGAGAGTCCGCAGAGAGTGAGAGAGTAGAGAGTCCTCAAGAGAGTCGTGGTGAGAGAGTGGAGAGAGTACAGAGAGTGAGAGAGTGACTTAAGAGAGTGGAGAGAGAGTACGAAGAGAGTAGAGAGTGGCATAGACACGAGAGAGTAGAGAGTCGAGATAGAGAGTAAGAGAGTGTGAGAGAGTAGAGAGTAAATAGAGAGTAGAGAGTCAAAGAGAGTATACGTTGAGAGAGTCGATCAGAGAGTAGAGAGTAGAGAGTATTGAAGAGAGAGAGTAGAGAGTGGTGAGAGAGTAGAGAGTCGAATAGAGAGTTAGAGAGAGTAGAGAGTTTTTTGCAGAGAGAGTTAGAGAGTCAAGAGAGTACATGAGAGAGTGGAGAGAGTGTAGAGAGTAGAGAGTAGAGAGTGCCAGAGAGTCGTCATCAGCAGAGAGTTACCTAGCCGAAGTGACAGAGAGTAGAGAGTACCCATTGCCAGAGAGTGTCCAGAGAGTAGAGAGTAGAGAGTAGAGAGTTGAATCAGAGAGTCATAGAGAGAGTCAGAGAGTCTGACTGAGAGAGTAGAGAGTGCAGAGAGTATGAGAGAGTCAGAGAGTATCACATAGAGAGTGCTCAGAGAGTCAGAGAGTAGAGAGTTGAGAGAGTGAGAGAGTGTCACGTAGAGAGTAGAGAGTGAGAGAGTAAGAGAGTAGAGAGTTAGAGAGTCCTTTCCTAGAGAGTACTACTTAGAGAGTAAGAGAGTCAGAGAGTAAGAGAGTCAGCAGAGAGTGACTGGAGAGAGTAACGAGTAGAGAGAGTTAGAGAGTTAGAGAGTGGTCACCAGAGAGTGGCAAGAGAGTCAGAGAGTAGAGAGTGTGAGAAGAGAGTAGAGAGTTAGAGAGTGAGAGAGTAGAGAGAGTGCCTTGCTGAGAGAGTGACTAGAGAGTTAAGAGAGTCGCCAGAGAGTGGGGTACAGAGAGTTTGTAGAGAGTCTGGGAGAGAGTTTTTAGAGAGTAAGAGAGTAATAGAGAGTTCAGAGAGTAGAGAGTGATAGAGAGTGAGAGAGTAGAGAGTGAGAGAGTGATGAGAGAGTTGCAGAGAGTAGAGAGTGATAGAGAGTGTCATAGAGAGTGAGAGAGTTCCAGAGAGTCTTAGAGAGTCAGAGAGTAGAGAGTAGAGAGTAGAGAGAGTAGATGGTGGCAGAGAGTGGAGAGAGTCAGAGAGTTGGCCACAGAGAGTTTACGTAGAGAGTGAGAGAGTGCTAGAGAGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTATAGAGAGTGCGGTATTAAGAGAGTTTCAGAGAGTTGACCAGAGAGTTGGAAGAGAGTCTGCAGAGAGTCTACAGAGAGTAGAGAGTTCAGAGAGTAGAGAGTAGAGAGTTTATTCAGAGAGTCAGAGAGTAGAGAGTCCTAGAGAGTTCAGAGAGTGTTAGAGAGAGTGTGTAGAGAGTCTTGGGAGAGAGTGTCATATGAGAGAGTAAGAGAGTCAGAGAGTTTAGAGAGTAAAAAGAGAGTATCAGAGAGTAGAGAGTGAACAGAGAGTTAGAGAGTATAGAGAGTAGAGAGTTCTGAAAAAGAGAGTGTCAGAGAGTTAGAGAGTCAGAGAGTCTTCAGAGAGTTGGAGCGGATCCAGAGAGTCTAGAGAGTCGCATTCAGTAGAGAGTCAGAGAGTGCCGAGAGAGTAGAGAGTAAGAGAGTAGAGAGAGTTAAAATGAGAATAGAGAGTTCTCAGAGAGTGAGAGAGTAGAGAGTACTTACCCCAGAGAGTCCAGAGAGTAAGAGAGTCGAGAGAGTTCAGAGAGTCAAATTGAGAGAGTAAGGCCAGAGAGTAGAGAGTAGAGAGTGTAGAGAGTAGAGAGTGTAAGAGAGTGCCTCAGAGAGTAGAGAGTGAGAGAGTGTCGAAAGAGAGTAAAGAGAGTGCAGAGAGTCAGAGAGTAGAGAGTTATAGAGAGTCAGAGAGTTAACAGAGAGTATTAGAGAGTTCAGAGAGTTGAGAGAGTATTTCAGACCAGAGAGTAGAGAGTCGTAAGACAGAGAGTGTAGAGAGTTAGAGAGTTAGCCTTGTTATTGGTCAGAGAGTAGAGAGTCAGAGAGTAGAGAGTGTAGAGAGTGTAGAGAGAGTCTAGAGAGTAAGCAAAAGAGAGTAGAGAGAGTCACAGAGAGTAGAGAGTTCAGAGAGTAGAGAGTTCAAGAGAGTGAAAAGCAGAGAGTAAGAGAGTAGAGAGTATAAACCAGAGAGTAGAGAGTAACAGAGAGTAGAGAGTAGAGAGTAAAAGAGAGTCAGAGAGTCACTTCCCCAGAGAGTAGAGAGTAGAGAGTCAGAGAGTTAGAGAGTTCAGAGAGTGCCGTCCAGAGAGTCAGAGAGTACCACTAGAGAGTTGACTGATTTAAGAGAGTAGAGAGTGGCGGAGAGAGTTTACGAGAGAGTAGAGAGTGTTTAGAGAGTCACAGAGAGTGCAGAGAGTAGAGAGTTTAGAGAGTTAGAGAGTTTAGAGAGTGAGAGAGTCCAGAGAGTAGAGAGTCGAGAGAGTGAGAGAGTAAGAGAGTAGAGAGTAAGAGAGTAGAGAGTAGAGAGTTCCGGGTTAAGAGAGTCCCATATATCCACATACAGAGAGTTAAGAGAGTGAGAGAGTAAGAGAGTTGAAGAGAGTTCAGAGAGTTGAGAGAGTACAGAGAGTACATAGAGAGTCGAGAGAGAGTTCTTGGTTAGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTAGTTAGAGAGTACAGAGAGTAGAGAGTAGAGAGTAGAGAGTCCTTACGTAGAGAGTGCGTTAGAGAGTAGTCCCAGAGAGTCAGAGAGTTCTTAGAGAGTAGAGAGTTACTAGGAGAGAGTACTCAGAGAGAGTAGCCAGAGAGTTAGAGAGTTAGAGAGAGTCAGAGAGTAGAGAGTAGAGAGTCCTTCGAGAGAGTCAGAGAGTCCAGAGAGTCCAGAGAGTAGAGAGTTAACAGAGAGTAGAGAGTAGAGAGTTCCTCCAGAGAGTGAGAGAGTCAGAGAGTAGAGAGTAGTTAAACTGAGAGAGTCCGAGAGAGTACGAGAGAGTACAGAGAGTAGAGAGTTGTAGAGAGTCGTAGGTAGAGAGTTGGCAGAGAGTGAGAGAGTCAGAGAGTTTCAAGAGAGTAGAGAGTCAGAGAGTGCATAGAGAGTAAGAGAGTGAGAGAGTAGAGAGTGGCATAAGAGAGTCTCAGAGAGTACACAGAGAGTAGAGAGTTAGAGAGTTTAAGAGAGTGCCCGTAGAGAGTTAGAGAGTGAGAGAGTGAGAGAGTCCAATTCTGTTCAGAGAGAGTTAGAGAGTAAGAGAGTTGAGAGAGTAGGCGAGAGAGTTCTTACAAAAGGGTTAGAGAGTAAGAGAGTGAAGAGAGTTGTAAGAGAGTAAGCTACTTAATGAAATCAGAGAGTAAAGAGAGTTAGAGAGTCTATAGAGAGTGTAGAGAGTACCGCAGAGAGTGTTCTAGAGAGTCTTGTCCCTACAGGAGAGAGTCTAGAGAGTAGAGAGTAGAGAGTCTAGAGAGTAGAGAGTAGAGAGTAGAGAGTATAGAGAGTGTTAGAGAGTTAGAGAGTAGTAGAGAGTCATAGGGCCAGAGAGTCTCATAAGAGAGTATATGGAAGAGAGTTATTATGCACCCAGAGAGTAGAGAGAGTTAGAGAGTTGAGAGAGTGACACTAGAGAGTAGAGAGTAAGAGAGTAGAGAGTTACGAGAGAGTTAGAGAGTAGAGAGTAGAGAGTAGAGAGTATTGAGAGAGTTCTCATTTTTGAGAGAGTAGAGAGTCTCTAGAGAGTAGAGAGTCGGATAAGAGAGTGCGGAGAGAGTAGAGAGTCAGAGAGTTGCGAGAGAGTAGAGAGTTCTAGAGAGTTTCCCGTTAGAGAGTAGAGAGTAGAGAGTTAGAGAGTAGAGAGTACAGAGAGTAGGTTTTAGTAGAGAGTTATAGAGAGTTCCCTAGAGAGTAGATAGAGAGTATGAGAGAGTAGAGAGTTCCCAGAGAGTACCCTTAACCGACTAGAGAGTGAGAGAGTGATGCAGAGAGTGCTAGAGAGTTGAGAGAGTAGAGAGTGCTAGAGAGTGAGAGAGTAACTTAGAGAGTAGAGAGTAGAGAGTAGAGAGTCGTGGTTTAGAGAGTAGAGAGTACAGAGAGTGATTTAGAGAGTAGAGAGTAAACAGAAAGAGAGTGCAAGAGAGAGTAAGAGAGTAGAGAGTAGAGAGTAAACCGAGAGAGTAAGAGAGTCAGAGAGTCGAGAGAGTAGAGAGTAGAGAGTTAAGCGTCTAGAGAGTGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTAGAGAGTTGTAGAGAGTCTAGAGAGTAGAGAGAGTCATTCACCTCTTCCAGAGAGTAGAGAGTCAAAGAGAGTACTTAGAGAGTGATGAGAGAGTACTTAGAGAGTTTAACGCAAGTCGTCTAGTAGAGAGTAGAGAGTAAGAGAGTAGGTTAGAGAGTTAAGAGAGAGTTTAGGAGAGAGTATAGAGAGTGATAGAGAGTGATGGCAGAGAGTACAGAGAGTAAGAGAGTAGAGAGTCGGAGGAGAGAGTAGAGAGTAGAGAGTGAGAGAGTAAACAGAGAGTTGCGAGAGAGTGTAGAGAGAGTTGCAGAGAGTAAGATTTAGAGAGTCTGACAGAGAGTCCAGAGAGTGTCCGAGAGAGTAGAGAGTAAGAGAGTTATTAGAGAGTGTAGAGAGTTAGAGAGTAGAGAGTAGAGAGTGAAGAGAGTAGAGAGTAGAAGAGAGTCAGAGAGTAGAGAGTAGAGAGTAGAGAGTATAACAAGAGAGTCTTATCCAGAGAGTCGAGAGAGTTAATCGTAGAGAGTAAGAGAGTGAGTTCTTTAGAGAGTGCCGGAGTAAGAGAGTAGAGAGTAAGAGAGTGGGCAAGAGAGTGTCAGAGAGTTAGAGAGTCAGAGAGTTGATAAGAGAGTTAGAGAGAGTCGGAAGAGAGTGAAGAGAGTCTGAAAGAGAGTAGAGAGTTTTCGGTCGAGAGAGTAGAGAGTAGAAGAGAGTTTAGAGAGTAGAGAGTAGAGAGTGAGAGAGTAGAGAGTAGAGAGTAGAGAGTCGCTTAAGAGAGTAGAGAGTCCCAGAGAGTTAGCAGCTAAGGCCTAGTGAAGAGAGTAGAGAGTAACAGAGAGTAGAGAGTTAAGAAGAGAGTAGAGAGTGAAGAACAGAGAGTTCTAGAGAGTAGAGAGTAGAGAGTGAGAGAGTCGAGAGAGTTAGAGAGTCAGAGAGTCTCGGTCGAATAGAGAGTTTAAAAGAGAGTAGAGAGAGTCGTGTGATACTCATCAGAGAGTCAGAGAGTTGGGAGAGAGTAATAGAAGAGAGAGTAGAGAGTAGGGCGAGAGAGTAGAGAGTGCTTCGGGATGTGCTAGAGAGTTAGAGAGTAGAGAGTATTTACTGGATTTGGGAGAGAGTACCAGAGAGTTCAGAGAGTCCGAGGCTCAAGAGAGTAGAGAGTGTAAGAGAGTGAAGAGAGTAGAGAGTAGAGAGTACAGAGAGTTGGGACCAATAAGAGAGTGCTAGAGAGTGAGAGAGTGATGAGAGAGTAGAGAGTGGCCAGAGAGTGATCAGAGAGTGAGAGAGTGAGAGAGTGAACTGGAGAGAGTCTTCAGAGAGTAGAGAGTAAGAGAGTAGAGAGTCTAAAGAGAGTAGAGAGTGAGAGAGTCTCAGAGAGTTCTCAGAGAGTGAGAGAGTCGAAGAGAGTAGAGAGTGATAGAGAGTACGTCGCGGAAGAGAGTTGCAGAGAGTAGAGAGTATTGATGAGAGAGTCAGAGAGTCTTGAGAGAGTAATTGAGAGAGAGTAGAGAGTACTTCAGAGAGTTAGAGAGTGCCCACACAAGAGAGTTACCAGAGAGTCAGAGAGTAGAGAGTGCTAGAGAGTAGGGATGAGAGAGTCGTGTCGAGAGAGTTAGAGAGAGTTAGAGAGTAGAGAGTAGAGAGTTCAGAGAGTTCTAGAGAGTAACCAGATAAGAGAGTCAGAGAGTTTCAGTAGAGAGTTGCCCAGAGAGTGGCCAACGAGAGAGTAGAGAGTACAGAGAGTTAGAGAGTGGCGCCCAGAGAGTAGAGAGTAAGAGAGTTAGAGAGTTGAGAGAGTGAGAGAGTAGAGAGTAAGAGAGTAAGAGAGTATCTTAGAGAGTACGAGAGAGTAAGAGAGTAGAGAGTTAAGAGAGTGAGAGAGTTAGAGAGTATCAGAGAGTAGAGAGTCAGAGAGTAGAGAGTCCCGTAGAGAGTAATAGAGAGTAACAGAGAGTAACTCACCTAGAGAGTAGAGAGTCTTAGTCCAGAGAGTAGAGAGTAGAGAGTAGAGAGTTGTAGAGAGTACCGAAGAGAGTAGAGAGTAGAGAGTCTCTAGAGAGTCCAGAGAGTAGAGAGTTAAGAGAGTTTAGAGAGTGGGAGGGGGAAGAGAGTAGAGAGTGAATAGTAGAGAGTCAGAGAGTTGAGAGAGTTAGAGAGTTAGAGAGAGTTCTATTAAGAGAGTGCAGAGAGTCAGAGAGTAGAGAGTTAGAGAGTAGAGAGTTAGAGAGTTCATCTGGCGAGGAGAGAGTAGATAGAGAGTAAGAGAGTTCGCAGAGAGTGTATATGCAGAGAGTCGGGTCTGTGCAGAGAGTCGGCAGAGAGTGAAGAGAGTAGAGAGTAGAGAGTGCACTGGCCCGAGAGAGTCAAAAGAGAGTGGCAGGGTCCAGAGAGTGCCATCAGAGAGTAGAGAGTAGAGAGTAAGAGAGTCGCCGCAGAGAGTCAAAAGAGAGTAGAGAGTTACAGAGAGTAGAGAGTTCGCTTTCCAGCTAGAGAGTGATCGTTAGAGAGTGCTCAGAGAGTAGAGAGTAAGAGAGTACTAGAGAGTAAGAGAGTTAGAGAGTGAGAGAGTAGAGAGTAGAGAGTGAGAGAGTGAGAGAGTTTGAGAGAGTCAGAGAGTTTCCCTAGAGAGTAGAGAGTAGAGAGTTCCAGTCTAGAGAGTGAGAGAGTCCAGAGAGTCTTCTAATAAAGAGAGTCGCAGAGAGAGTAGAGAGTTGGAGAGAGTAGAGAGTCTAGAGAGTTAGAGAGTGAGAGAGAGTCTGAGAGAGTGGAGAGAGTGGAGAGAGTCAGAGAGTAGAGAGTTTAGAGAGTCAGAGAGTGCGAGAGAGTAGAGAGTGAAGAGAGTGATATGAACTAGAGAGTACCAGAGAGTTTAGGCCATGAGAGAGTGCAAAGAGAGTCAAAGGGTATCGGATCAGAGAGTATTGAGAGAGTTCGACAGAGAGTGAGAGAGTGTTGAGAGAGTAGAGAGTATTACTGTAGAGAGTTTGCACCGCAAAGAGAGTGTGGCTCCAGAGAGTGGTAAGAGAGTGAGAGAGTGGCAGAGAGTCAGAGAGTAAGAGAGTAAGAGAGTGCTCAAGAGAGTGCAGGAGAGAGTCCTTAGAGAGTCAGAGAGTAGAGAGTAGAGAGTAAGAGAGTAAGAGAGAGTAGAGAGTAGAGAGTGTAGAGAGTCCTTGTAAGAGAGTCAGAGAGTAGAGAGTAAGAGAGTAGCTAGAGAGTCAGAGAGAGTGGGCCAGAGAGTGCCTAGAGAGTAGAGAGTTCAGAGAGTGTGAGAGAGTTATAAGAGAGTGTAGAGAGTCAGAGAGTACAAAAGAGAGTAGAGAGTAAGAGCTAGTCCAGAGAGTACTGTTGCTCCTATAAGCAGAGAGTGAGAGAGTCAGATCAGTTAAATAAGAGAGTCGAGAGAGTGGATAGAGAGTTAGAGAGTAGAGAGTGACAGAGAGTTAGAGAGTCAGAGAGTCCAGAGAGTTTTAGCAGAGAGTAGAGAGTAGAGAGTGACTAGAGAGTGTAATAGCTCGA'))

text_file = open("/Users/brian/Downloads/Vibrio_cholerae.txt", "r")
data = text_file.read()
text_file.close()
print(patternMatch('CTTGATCAT',data))


"""
FindClumps(Text, k, L, t)
    Patterns ← an array of strings of length 0
    n ← |Text|
    for every integer i between 0 and n − L
        Window ← Text(i, L)
        freqMap ← FrequencyTable(Window, k)
        for every key s in freqMap
            if freqMap[s] ≥ t
                append s to Patterns
    remove duplicates from Patterns
    return Patterns
"""
#%%
def findClumps(k,L,t,text):
    patterns = []
    n = len(text)
    
    posMap = {}
    posMap2 = {}

    

    for jk in range(len(text)):
        mytext = text[jk:jk+k]
        if mytext in posMap.keys():
            posMap[mytext].append(jk)
        else:
            posMap[mytext] = [jk]
            
    for key in posMap.keys():
        if len(posMap[key]) >= t:
            
            
            for i,j in enumerate(posMap[key]):
                count = 0
                for nex in posMap[key][i:]:
                    if (nex - posMap[key][i]) <= (L-k):
                        count = count + 1
                    else:
                        break
                
                if count >= t:
                    if key in posMap2.keys():
                        posMap2[key].append(j)
                    else:
                        posMap2[key] = [j]
                    
                
            
            
            
        
            
    return len(posMap2.keys())
            
    """  
    
    for i in range(n-L+1):
        window = text[i:i+L]
        freqMap = frequencyTable(window,k)
        
        #print(freqMap)
        #print(maxMap(freqMap))
        
        for s in freqMap.keys():
            if freqMap[s] >= t:
                patterns.append(s)
    patterns = list(set(patterns))
    return ' '.join(patterns)
    """

#print(findClumps('CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA',5,50,4))


text_file = open("/Users/brian/Downloads/E_coli.txt", "r")
data = text_file.read()
text_file.close()

print(findClumps(9,500,3,data))






