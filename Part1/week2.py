#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 20 16:51:59 2022

@author: brian
"""

"""
Since we don't know the location of ori in a circular genome, 
let's linearize it (i.e., select an arbitrary position and pretend
 that the genome begins here), resulting in a linear string Genome. 
We define Skewi(Genome) as the difference between the total number of 
occurrences of G and the total number of occurrences of C in the
 first i nucleotides of Genome. The skew diagram is defined by 
 plotting Skewi (Genome) (as i ranges from 0 to |Genome|), where
 Skew0 (Genome) is set equal to zero. The figure below shows a
 skew diagram for the DNA string CATGGGCATCGGCCATACGCC.

"""

def skew(text):
    myskew = [0]
    for i in text:
        if i == 'G':
            myskew.append(myskew[-1]+1)
        elif i == 'C':
            myskew.append(myskew[-1]-1)
        else:
            myskew.append(myskew[-1])
            
    return myskew

def skew_pretty(text):
    myskew = [0]
    for i in text:
        if i == 'G':
            myskew.append(myskew[-1]+1)
        elif i == 'C':
            myskew.append(myskew[-1]-1)
        else:
            myskew.append(myskew[-1])
            
    return ' '.join([str(i) for i in skew(text)])

print(skew_pretty('GAGCCACCGCGATA'))

print(skew('TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT'))
        

"""
minimum skew
"""


def minSkew(text):
    myskew = skew(text)
    minvalue = 10000
    for i in range(len(myskew)):
        if myskew[i] < minvalue:
            minvalue = myskew[i]
            print(minvalue)
    return [i for i,j in enumerate(myskew) if j == minvalue]

def maxSkew(text):
    myskew = skew(text)
    minvalue = -10000
    for i in range(len(myskew)):
        if myskew[i] > minvalue:
            minvalue = myskew[i]
            print(minvalue)
    return [i for i,j in enumerate(myskew) if j == minvalue]

print(minSkew('TAAAGACTGCCGAGAGGCCAACACGAGTGCTAGAACGAGGGGCGTAAACGCGGGTCCGAT'))

myfile = "dataset_7_10.txt"

text_file = open("/Users/brian/Downloads/dataset_7_10.txt", "r")
data = text_file.read()
text_file.close()

print(' '.join([str(i) for i in minSkew(data)]))


"""
hamming distance
"""


def hammingDist(text1,text2):
    
    count = 0
    for i in range(len(text1)):
        if text1[i] != text2[i]:
            count = count + 1
    return count

print(hammingDist('ACAGGTCCTGACGGTTTAGGACACCGGGACTCGCTCCCTGTTCAATGCCTTTTCTCTCCCCGCCATGAAACGGTGTTACTCTGTTTGGTCTTTAACTACACTTTCATTTATGAACTATAACGAAAAGGTAGCAACGTGGAGGTCTTCCGAAATTCCGCGGGCGTGAACTCGTTAACCATTTCACAGCTATAGTTGTAGGGCTGACCGCTACACAAGTATCCCGGACATTCGAACGGTGTGCCCTGGAGAAAGCTGACGACAAGGTGTGGCCACGTTCAATACCCAGGTGGTGGTAGCTCTTGACTTGTAGAGAACCACGAGCATAGATACACCACAGCTTGGATGCTCCTTGCGCCGACTTTTCCAGACCCTTTACGCGAACCCAGCTCCTTCCCGCAATGGGAGCGTTTACCTCGATTATCGTACTTACCTCTTGAGCGTTGCCGGCTGTAATTAGAGAGGACGTGATATGACGCGACTCCACGGAAACTCGGCTATGAGCCGTACGGGCAGTTGACGAGATCCTAGTGGATATGGTGACACTGGTGGAGAGGCTCGTTTGGTGCCACTAACGCCGGTCGTGCGCGCGCACTCAGCGGGTCTCCCGCCTCGATTCCCCCTTGTGAGTTCATAAGTTATGACTCGTATCCTCCGTGTGTTTATCGCTCTTGCAGCTCAAATGATATTTGGGTTGTAGGCCTTATTGGTATGTTAGCAGTACCGATCACAGTAAAACCAGATCACTACGTGCATAATCGCCGTACCCTACGGTAGATTTTGCTCTTAGTATTAGCTAACCGTCCTACAATAAGGCGCGCATCCATACCGGTTTGTGGAAGTACAGGTAACAGGCCCAACTATCCAGGGCCCTCTCTAAAACTTGTCGAAAACTTCGAGCGTTTCCGTCAAAACCTCGTCAATATCGGGACACATACCCTAAGGTGTATACGGTTATTAAGTGTTGAGTTGCTTAGATGCAACTGCAAAAAATTACGCCCCGCGGGGGATCGTTGCGACGGCTATGGGTATCACATGGCGTTATTATGGGGCACTCTACTGTTCTAATATAACATTAGTATTGACGCTTAGTCCATCCAAGCTGC','GCTAAGACTGTGCTCGTCTTGATTATGCCTTCGTACCATATTACGCGGATTCTATCGGAAAATTGACGTTCTTTCGAATCCTACGTACCCTGCTGGGGACCAGCTAGAACTGTGGTGTCACCCCAGGCACGCTCAGGCGGGGTCTTTGTCTTTACTTTCGTCAATTGGTCTTATCAAGCTGGCGCAACTATCGGCCCTCTCCACTCCATTGCTCTGGTTAGGGTGGTTACGGTCGCAGAAGTTAGCAATACGAGTGTAACAGCTCGCAAACGCGAGGCCTATATCCGATCGCTCATTGCGCGTCACTGCGTGACGGACTTCGGCTCATGCTTTAGACCTTTAAGGAGAGGTAGGCGGCGTTAGGACCGGAACAGGGGGTCTAGTGTATATAAACTAAAACTTCCTTGGCGTGCCCGAGCACCGCGCAGATAATGAATCCGGCATCGAGGACCATCCCCTTATACGTGTTAGACGCGTAGGTCCTTCGAGAAGATCTCTACTCTGGGCAAAATCTCATCCAGGCGTCCAGCACGCTTACCCCGTGACTGATCAAGGAACCCTTGATTAACGTTGAGTTCACCGGGGTTACGTATGCCTAAGCAGTCTTGAGCTAAATTACTAATACCAGATGGCCGAAGTAGCTGTACTCGTTGCAACGCGATCATCGACTGGCGATACCATATAGAAGAGGGTTCCGACCCATGTGTGTCTGTGAGTCTGGGTTTGTGAGCGGCCCATACGTCGACGAAGATGAATCATTCAGCTGCACGTTCCACTCATTCACACAAACATTGTGATTGCATTGAGCGCCGTGACGTTTTACCCATTTTCTGCTCCCAAAATAGCTCACTGGGCAGGGGCAACGTATTACTAACGCCTTGAAGCATAAGGTCCATTGACCAACTGAATAGCGCCGTGTTAACTTCCCTTCTTCACACTGCGTATCCCTACCCTAGACCTGTTATGGTCTGGATACATGTATGGAAAACCCCTCATACAGATTTCGCTGAGGAGTCAGTTTTCTCGACGGTGCTCTAGTGAAGGCAAGAGGGGATACTTCGAATCCCCCATTGATCTCAGAACTGCGAGCTGGAATGAAGCAG'))

"""
approx pattern matching
"""

def approxPatternMatch(d,shortText,longText):
    matches = []
    for i in range(len(longText) - len(shortText) + 1):
        if hammingDist(shortText,longText[i:i+len(shortText)]) <= d:
            matches.append(i)
            
    print(' '.join([str(i) for i in matches]))
    return matches


approxPatternMatch(6,'GACTAAAAAA','CACCGATCAATTTGTAGATAAGAGATAGATTTGACCATAGATAACCGGACTCGCCACACGCCCGCTCCCATAACTTCGTCAATGTTGAGGTGAATACGTGCCTTAAGCTTCGATCGCTTTACGACGTATGCTGAGTAACTTATAGAGTATAGCACCGAATCTCTGATTCAGTTTAGCTCACGGCATGCAAGTTCCGAAATGGAGTCTTTCTCACTATATTGATCAAATGCTTCCACATTGACTAAGAAGTAGACTAGGATTCATGGCACACCGACTTTGTTAGGCTTACCGTGTGACTGCTTTGTGAGCTGGAGATACATCTGATTAACCTTGTACATGCTCTTAGAGGTTATGGCGGAAAGAGCCCAGACGCACTCGACGCTGAACTTTTCCATTTGGGTCTATTGAAGGTTTGACGGGGTGACTCGGTGGTGCAGTGCCTATCCGCCTAGTGTCTGCGCTGGGTTGCTCAGTTAGTGCCTCTTCCGTTCACGCACACAGTTCAGGGTAGTTCCAGACGGACTGTAACCTGCGGCCGCCGATATCGGCTACGCATATCAGTCCGGCTGCAATTATAATGCCTGCAAACGGAGCTTGGGGTTAATCAAAATTGAAGCCGAGAACGATCTTGGTCGCTACTGAGCACAAGGCTGGTACATAAGAGCAGCGTGTTGTAGATACGGTAGGGCCCAAAACTAGAAACCCCCCGGCCGTTAAGCGCCTCCCACCCCAGGTTAACCACCTGCAGTGAAACTTTGAAGACCCGATGACAGTCCCTAGCTCCGGTGAGATAATGAGAAATCTGCGGCGTAGATGGCCCAACATCTACCAGCTCAAAGCGTAAGGCATCATCAGGCGCCTATTATGTATTGAGGCGATGAAGGATCGATGATCGATCTGATGTAGGTCCATTAGACTAGAGCGCTCATGTAATAGAGGTCTGCGAATTTTCACATAATATGCTTTAACATTCGATATGCGTGCCCATCGTGCCTGACCAGAGCCACGGACTTTCACGGAACAACACGATAACGGAGCTCAAACTATTGAGTAATCGAGCTAGGTTCGACATGGTACCCTCGTACTTGTCCGAACACTCGGGGCTGCCTTTCCTAATCACACGCAGTTCAGGTCCAAAATATAGAGTATCCGGCTGATCACAACATAAATAATAGGAATTTCTGGAGAAGCATTATGGGACTGGTACGCAACGGCGCCGTGGTTTTAGCAACGACTGCTTGTTGACCTGAGACAGCCAATCCCGCGGATGATCTGGCTAGCAGGAGCTGCTTGGGCCTATCGAGGGGTTCTTGTATTGATAATCGGGCCTTGCCTTGCATACCGATATGAGGAAAGCCCCTAGACCGCTCCGTCAGGGACGTCCTGTGCCTCACTTGTTACTTGTTATGAAGTTCCGTGACCGCCGACACGAGGTTAAAAAAGAACCGCCCTTCTATGAGTTGTCTGTGACATTCTTCGGCGACTAAAGACGTAATTAAAAGACTACTATCCTCCGCAAATTGCCGAACCATGACAGAGATGGCAACGTGCCTGTTGATAATGTGCGTGGCAGGACTCCATGCGAGTTCGGCCGATATGTTCCTTCGCTGGCATTAGCGATCTCGAATCCTGAGGGGTGCAGGTCGAAATACCGGATGCCGCATGCATTTTGTTAGCAAACGATCATCCGGGGCGCACAGACTCGTGCTTAAACTAACAATCGTCTTTGCGCATTAGTTGGTCCTACCGATTGAGCTGCGAGGACGTCGTAGGCAAATCTTCGCAGCAATCAGAAGGTTACCCCAGGCACCGCGCCCTTCTCGAGCTGGGTAGTCGACCGCTCGGCTTTCCCAGTTACCTACCAGCGTGTAACTGGAGGATCATGTGTTGGCAGTTCGTCTGACGATATATGGATTTTACCGTGGAGCAATGTTGGGGGACTACAATGGAGCACTTAAAATTCCGTGTACGCTTCGTGATCCACATTCTCCGCGACGGTGGCTATTAAGCTCAGTCTGTCGAGCCAGCAGGCCACCCGATTGACAACAGACTGCTGTGACTAAGTTGGGTCATTTCATTTGGCCATGTGCCCTGCACACCGGTCTTGGCCACGCATCAATAAATACATGGAGGAACCCGGCTCCCTTGGCGGACGTTTAGATAACCACGTTCTTAGATCAGTAGTGACGCGAAACTGTAGATAAGATCCATACGAGCCAGTTTGTCGTAACTAATTTAGCAGCCTGGTCTTCCCAAGCAGCATGCCCAGTACCTGAGAACATACCGCAAATGGCTTCTGATGTTGCGGGACTGCTCCCGCACTATATCTGAGGAGCTGCCTATTGGACTCGTAGGCTACCCCGAGTTTGGCCGTTGCCTTCCCTGGTGTTCGCCTACTCAAGTCAACTCGAGGCTAACCGCTATTTGGAGTCCCATACGGTGGAGTGTAAAATGTTCGAGGTCAGCTCCAACTGGCTCTGCCGCGCCCGGGATGTTTTGGTACCCACAGATGTCCGTCGCTCGGCCAACTCCGAAATAACCCCCCCCATGGCCGCTTAAACAATACATGGAGCAATCGGGTACCAGTTCAATATGCCTCTTGTAAATCCGTCTGGGTGGGAACCTGACCTTCCACGTCAGTCGAGGCATTGTTCCCCTGAAAGCAAAATTCAATATATAACCCACCATGACATGTCGGTGATCTCAGCTAACGACTATTCGGAGCGGCCAACCTACTCTAGTAACCGAGGATAGAACCCCGTAACGCTGCTAAGTTAGTCGTACGCGATTCCTCGCCAATAGAAACAAGAATATCCTTTCTACTTGGTCATTCGGGATCTACTCACAACGATCGTATACCGAAAACATCCGTATACCGTAAATGCTAAACTCCAGCAGCGCCCCCAGCGCCTCTAAAAAAGCGTCGCTTAGACCCCGGCCCCGGCATTGGGGATCCGCCGCTTAGTGGCGTGTCGGTATGATTTATTGCTGAAGTCTCTACGGGAGTGAGGACGGCCCATCTCCTCGAACAATCCGCCGAAGAAGAGACCACGCTGTTGCACCCGTCCCATATAATGCCGACCTGCGTAGCGATGTTACTTCGATGGCTGTACTGATGATATTTAGAGCTGTATTCTCGCCACATTCCGGTCACACATCCGAATCATAGGCGTAGAGTGATAGGTCGATTAATGCAAAATGCTCCCGGCCTGCAACAACCTCGACACAACTGCTCTTAACAGCACACTCATGAAAAATAGATGGACTCCCGTAGCCTCCCATTCATGAACCTATCTCCCGCTCGGATACCGAGCATGGGTGGTTCGTGCTCTCCCAAGCATAGTAGTCCGGACTGCACCGGGGGCTAGCGAAGTGTCCGTTATGGAAATTTCACACAGTGCAACTTTTGCCCCTAACAGAGGTCAGGTTTTTGTACATTTGTGCTCGACATCTGTTTTGACAATGAGGTCCTCCGCATGGATGACGCCTAACACCTGTGCTTGCCTAAGCGACCGTGCTGAGGTCCCGTCTCAGAACGATGTAACTTCTGCTCTTAACTTCTGAGCTACATCTAGGACTCCATCGTGCGCAGTGTCATACGATATCGTCTATTTTCATGACAACATTCGATTGGTTATTGTCGAATTGTTACGAGTCTAGGTGACTACAGTCCCCACGTCGAAGAATTAAATAATCCTTGCGGTTTCGTACCTAAACCTATCCTAAAGACATATGGCTCATCGGCTGCTATACAATTACGATAACGCACCCCTGCGGAGTAAGCTGTACACGTGGAGGGTCCAATGCATAGAGGGGTACCCAACGCTGCGGCGTTAATTGCTCATCTTTTTCGGACAATGACAGGTCAAGAAATCCTAACTGAAATAGGGACCGATAGCAAGCAACCCTCAAGTGTAATCGTTCACATTTACGTCTGGAAGATTGGACGATGCTCCCGCACGCTAACAGAGCGGGATGAGTTGTCATAGCTAATTGTGGACTGTGTGATCGTACCAGCGGAGACATTAACCCCTGGGAATCCTGAGGTCCTAGGAATGGCGGACGGCTTGGCGGTCAGTTGCATTGGATAAAACTTACGTCCGAGTGCCGAGCAGGAGGGATACATCTGACGATTGATGTCATAGGACTATGACAGTTAACAAGAATGGGAGTATGTATGAGCTGCCACGAACGATCTACCGATACCGATTTGGCTGTATGTACGCCGGAATATGTCAGAGTTTCTCCGCGCGCTACTAAGGGCTGGGGTTAAGTCACTACCGCAATTCGCGACATTTGTTCCTGGACACACAGGCCATTATATACCTGCCCGTCTCGGCATGCTACGCAGTATATTTGTAACCCGAAAGTATTGATCAAGGATACCCGTTTACAGCTGTGGGCGCAACGTTGTACGCGTGACGGTGGACATTTTAAGCTTACGTTGTTGACCGCGCAAGACCCGATTAAGCATAATATCTTGTCTCTTGCCAGTTGTTCTAGGAGGCTCCTCCCGGCTCTGTGGGGCCAGTGACGGCCCGAGCTCCAACTAGCCTCTCTATGCCCCAAATTTCTGGGGGGTACATTATTGCGAAGAGGACCTCAGCGGGACGCTTTAGGGTTCCCCCTTTCACACACGGGGGACTTATAAAGTGCCTCTTCCTACGTAGAAGAGCAATCCATATGTGACATCGGCAGGATCCCACATATGAAGTTTCGGGCAGTACGCTGAATGGCCGTCCGCGAACCCGATCCGCCTTGACGCCGCCCTAGCGCTTCCTGTCTTTCAAAATATGCGGCTACGCTTTACAAAAACAAGGACGACAGGAATCTGCCCAGGACACAAATACCAACGCACATCCCGCTACGGCCATACTGGGTAACATATTCCTCGGTTAATCTGCAGGAGTCACAAGCTGTCGGGACCCAAGGGTTTAAAGCAATCACTACGCATCAAGAACGATACGTACCCCAGGCGCGGGGCGGGTATTCCATGAGTGGCTTCTGACGTGTCATGCGATTTTATAATTTAATTTAAGACTGATATCTCCGCACACGCAATTTCATATTCCAGACCCGAACGGAAAAACCCACACCTGACAACCCAGATGTAACATATCTGAGCCCTGTCGTCCAAACGTAATCCTAACAGAACCTTCTGGCTCCGAGTCCCTAAGCGCCGGATATATTATGACTTATGGACTATGGGCGGTGTAGTAGGAAAATAGGGGGTAGGCTAGGTTCTTCAAGTCAACAAACTTGGGTGGTAGGGTCTCGCTAGGCGTTTCCCAAAATATAGTGTCAAGTACGGGGGAAGTCCGCGCCCTTTGACCTTCATCAACCCGGTGGAGTTCGCGTCGTAAGGCTTATGAAGTACTGAAGTTCCAGTCTACGTGGTGTTTGTTCACAGTGACATCCCTATCCGACTTCGGTCCACTAATAGCGACGACCGTAGGTGGCTTTACCGCCGCGTGGAAGAACAGCCCTTAATCGCTTGTAACGATGGGCCATCGGTAGGTGGCCTGCCGCTTAGTCTGGCCGTGTCACCAGGCCTCCGTTGACATTCTGGGGAGCTGCATCTACCATATCCTAAGTCTTCTCCGACGTGGCTTCCCAGTGCATGACGGCATCTAATGAGCCCCGTCTAAAGTGTTGAGGTTGGACAACGGGGCCCGTAGATAACTTAGAATCCATTTTCATGTGAGAGCCGAGGGCATAGTGTTGCATCATGGTTGAGAAGAGCTCGAATTATATGTTGAGGCTACCCGAATCGGCGCGGATCAAGTCCATCTTAGCTCTAATTGGGAACCTTTTAGAAAGCGATTGACCGAATCATTCGCCCATCCAGATATGATGGTTAGCTCCGGACCTTGGTCTGCCTGAGTAGGACGGATCTTCACGAATGTCAAGCACCGAATCCTAGATCTAGAGCTAACCTACTTGGTCGCAGACACCCATACTAGCTACGTCAGTATCGTCGTTCTCTCCTTCATGCTTAATGTGTGCTTACGTGTTACTCACGGAAACCCATCTAGAAGTAGAGTAGTCATGCTTAGATCGACCGGAACAGCAGCTTTCCCTAGCTTGAATGGATTAGAATTAGTCAGCGATGATTAGGTGACCGGAAGGGGAACTTAAAGAGTGGCGGAGGCCATGCTCCGGTTCGTCTCTGTGATTGTGTAGTTATCTCACGCTGGCGCCTACTCCCCTAGATCAGGGTTGCGAGTCAACGGGGCTGGAGCACGATGATCAAGCCTTGAAGCAGCACGTTTGGAATCCCTTGGCGTTATGCACCGAACAGGCTCCCTGGAGCCACCCGGCTTGTTAGAAGCGACCACGCAACTAGTGCCTGGCTGTATGTACAGGGGCTGGGCGATTAAGTAACTTAGCCTAGAGGGAATAGTATTAGACTTGTAAACAGCACCGCGATGGTTAGCTCCGCCCCGTTATCGCGATAAGATGTGGGTATCCGGTCCACGACTGGTCAATCGGCGCATTACCTCATGCCCAGAACGTGTTGTGTCTGGCGCTTTTCCAGGGCCACAGGGCCGTTAACGGTCGCACTACGGTTGCCGCCTGTTCAAACAACTCTATGCGCCAGCTGAATATGATTACCGCACCTGAGAATCCAAACTAGCCTGTTCGAGAGCTTACTATAACATCACTCGGAATTAATACGCGGCCACACCCAGGAAGAGCTTGACATATAGCGTTGGAATTCTACCAGTAAATCAACTACAGTTAAGACAATAGGAACTGTTCTACTTGTTGTCAATCCGAGGTCACTGGGATTTTCACTCCTGGGTCTCGGAGAACCCGCGGTGACGCCGTTGCGCAATGCCGATACTATTCTTATGTGAGTTGCAGTGCGCGTTGGAAAACAAACCTACCTAGTGGCTTGGGAGGCATTGTCCGGGTAGATTTCGTTTTTAAACTTACTCTATGTGTATAGTTTCACTACCTCTGGCCCCTTAGTGGGTGCTTCTAATATCGCACCTCAACGCCAAGTATCTTTAACAAGAGGGTACCCACGCAGACCTGGATTTTGTACGCACATGGTCAGAGATCGCTTGATGGTAAACCAAGTTGGCCCGGGGCGCCGGTGCTAATCTACAGCCACCGGAAATTTCAAAGAATACACGAAAACCATTACTTGTGGGAGACGATGGGCACCCATCTCTCTGAACGGGGCGGCACCCTGAACACGCCTAGTGTCAGGCTTTTGTACACACCTATGACTGTCCGCATGACATGATGTCGTCAACCTTTTGCATGCTGTCTTGGCCGATCGGGGTTGCTGACTGCTGACTATAACGAATTTGAATTAGGTGTCCTGTTATTCGCATCTTGGCTGTCGTAGAGCATGCATTATAAAACCTCCAAGAGCAACTAGCCGTACGCCTCTCCGGCTCGTTCAGAAAAGTCCAGCACTACTGCCGTAGTAAGGTTAATTTTATGATGGAGATGAGGTGTTGTCATATCGGTCGATTGAAATCCTTTCCGTTGAGGACGAGAAGGGTGTTATGTCGGATGGGCTTAACTGGATTCCAGGTCCCCTATTCAGTGTGACACAACGCGTGTCGCGAACACCGTGAATCCTCATTATGGTTAAGCATTCCTTACTGCACGATCCCGCGTTTCGTAATAAACATTTCGTGCTCAAAGCATAATCAGGGATTCAGCCACGCAGGTAGAGGAGCAGGCGAAAGACAGGGCGCGATCTGGAGGTCCATAGCAATGTGACCTCCTTGACTTCCTCAATACCGCGATATAGACAGACAGTCTCCCCGTCATGGATCCACTTTTGGCCGAGAATTTAGAGCCCAGGTTACTACAGGTTCCCAGCACCTTCAATCGTTGATCTCGATCCGGCGGTGACGAGGTCAGCGTCCCATAATGTGAGTGATAATTTATCACATAAGGGAGACGTTACATCGTTAAGGTCGTTAGGTTTCAACCGTAGTTACACGGCTTCACACGATAACGGGCGAATAGTATCGATCTGAACTAATTTTATTCTTTTATAGACGCGCCGTAAGAATAAAAGACAAGCACGAGCAGACTAGTCTTGCAGATGTCATAAACAGCTATGCACTATTCTATTCTGAAGGCCGTGACGCTCGTTTGAGTCCAGGGTTATTTGAGGGTTCCGTGTCGTACACGTCAGAATCGATTTATCCCGTGTACCCCATGTTGTGATGGGACCGGACCCGATGGCCTCTCCTATGGGGACTACAAGGAGGCCTAGCATTTGTAGATGCGATATGCGTAAAGCCTGCGCTGGTACGTTAAGGGAGCACAGCTAGCCGCTGACGCGCTATCAGGGTTCGTGAAGAGGCCGGATTTATTAACACACTGCGCGATACACCCGAACCACCCTGCCAGGAATAATTCTGGTTCTCTCACTTCGCACCAGAGCCTTTCAAAAAGCACACGGAACAACACCAGACGGGCATGTAACTATTGTGACCGAACTTCTGACCAGGCAGAGCAAGGTTACCGTTGTGCTCCGTAATATGTAACCGATTATTCGAGTTTCCCATTCATTTAGCAAGGGCCGGCGATTGGATACCTGTCACCGCCAGGTTTCGCAGGGAACATTATTACGTGGTTCAACGCACTTAGGGTTCCCGGGCCTAACGCCGATGGGCGATGTAATCGTCTCATACGGGCCTAACCCTTCGGGATAGGTCACACACTATGAGCTACAAATTACGATGTTTGTCCAATTACTCAGGTGATCCATTTGATGCGCGGCACTCTAGAGGCGGCGGTGGTAAGGGAAGTCTTTTAAAACCAACCATGGGCTGCGATCCGGGGTGTGGCGGGCAGAGTCAAGCTGTTGGGTTGTGCCCGAGTAACGGACTGTTACTTAGCGACTCCTTCTGCAGCTTACGGTGAATCTCGGGGATACGGACCAGCGCTACTGCAAAGTCAAGCCATCTGCAGAACGAATTTTTCTATTAGCCCTAGCCGACCTTATACCCAGACCCTTCCTTGCCTGGGTGCCAAACTCGGCTCTATGCTTGGCCCCTAACCGCGTATCTCGACAATTACCACCCTCAGACAACCCGGGTGATCAGTCTAAGACCAGAAATCATTTATGGGAGTGTCTTGGCGAAAGGGAAAATCAATCGCTCGCCGGTTGAATCCTCTGCTGACGTGAGGGCAGACTTCTGCTCTCCTAATAGATCCGTTGACTCTGTTTTTCGGATTCGCCTCGAGCTAGATACTATAGATGCTCTCTTTAAAAGAGATCCGCCAGGGGAGGATGTCTCCAACCCATTGTAAAGCTAACTTCTCGGCCGACATGTGCCGAGCTGTGTAATTGTACAATCGCGGTCAACGCCGGACGAGATGCATCGTCAGGCTCACACGTTAGCATTTCCATGATTTGCACCCATAACGATCTAACTCCGGACAGCCATTAAGGTTTCACGATGGCCTGGACGGCGCTTGGGGGCGGTTCGGTTGCTAGAAGCAGATGTGGCTTTAATCCATTTGCATTGCCATAGCTCAACCTGGCTTGTGAATATATTTCTGATCCATTTGAAGGTAGAAGCTAGGCGAGTCGTCTCAGCTGCCGATCGAACGACTGCGTATAGACGGAGTCGCATCGTACGCGCCGCAGTACGCCGTACCATCATGCTATTGGCGGCATATCAGCTCATCAAGGTGTACACGTCTTCTGGTCGTCGGAACCTGGAACTAACTGAATTAGGGAGACAGAATGGGCGACATACTAACGATCCGGCCTACCTGGTCGACTTTGTCAAACCGTTCAGAGACGGTTCATGTAGATGGTTGCGCATGTCTTACATTGCGAGGTTAGGGGCTATGCGCATATAGTTACACGTTAACTGTAGCAGTATTGGTAGACCTTGCCATTTAGGACGGCTCCTTTTGGGTTTTTGGAGTTTCCCTCTTGCGAATCAGCCCAGTGTGAGGCGTAACCACCCAATCCCCTGTCCAGCCTAGTGGGGACACACGTGGTTTAGAGTGCAAATGTCTAAGGTAGCTACTAATATCCCCCATGGACGCGAGACCGCGCGGTTACATTGAAGGACTCCTGCAGGACGCGCTAGACGAAGTACTTTTCATGGCATAGGTACCTCCGGCCGAAAGGATAATATCTCTAAAAGAGTCCTTAGTTGAGAGGAAAGTCACCTAGCTTCACACTAGCACAGGGAACTACCTTCGGAGGGCTAATTGGTCGCATGAAAGTTCGCGCGTTTGTGGTAATGCGTACTAAGGTCCCGAAGGGGTTAGGAAGGTATCATATCTGCGCTTATGGGCGAAACATGACCTTAAAAGTGAGCGCGGATTGGCACACTAGGGGCTGTAAGAGTACGCGCGGGTGACCGGAAACTCCAATCGCCCGTTTGGAGGTTTCTCCCAAGGGCCGGCACTGCATTAGATAGACCACACTTTGGATTTCAGAATGAAGCAGGAACGCCTAAATTGCGCTGCCCATTGGAATTTTTACCTGACAGACGGCGTTTTTAATCAGAGCGACTTTATGACATAAAAACATTCGATGCGATTGGGGATGAGTTATCCGACAAATGCAAGCCGGATAGGGTGGTACATCGCATAGTCTTATAGGGAGCGAGCTAAGAACGGATGCATCGTACTACCGTAATGTATATAGCATAGATAGGGTCGGATACATCGTTCGCCGCGACTTGATGATTGATGCAGTTTTATTTATGGCATCATAACCGTGAGCAGTCTTGCAGAAGCTGCATCTTAGTACTGAGCCCTACCCGTAAGCCTATAGCTCTGGGGCCACGGACTAGATCTTGGAAGTTGCTGTACGTTCTCCTAAAGAGTGACCTAGCATATAGAGCGCAGGAGCAGCCTTGCCATAGGCATTCTGCCTGTATCGTCTATATTTAACAAACATACCCTGTTGTAAACCTGTCTTTATAACGCTTTAGGACTTTATTCGACTTACCGACCGTGTGGGTCAAAGAAAACTGAGTTTTACGGAATAGCTCGATCCGCACCACACATAGTAAGGCCGATATTACAGGTGCTTTCGCAACTCCCTACGCTATAGAACCACTTCGGTAATTGCGGGAGTGGCAGTGCCACTTTGTGCATCGCTACATTACCCTCTAGTGCGGTGCCAACAGGCTTGACAATTCCGGTGAGGGGGTGTTCGCCTCGTAGATAATTATCCCGTTATGCTGGTTCTTATGACGTTGTGATCGCGCGACAACTTGGGAAGCAAGTGTTGTCACCGCCGTGTTCATTGTCGTGGTTATATGTGAAGTGCAGGTCTAGTCTTCAATGAATGCTATCTCTGCCTGACGGAAGGTCCTAGGTGATGGTCCTCGCTCAAGGCACATCAAGTACGGCAGAACCCCAACCAAAACCTGCAGTATACTTCAGCGGCCCCAGCTTAGTATGCAGGCATTTACGGCGCCTTGAAGCTGTGGCTTATGAATCCGGCAATGCATGTTTAAAATATTTATTAGTGGTGGATCGGCAACGAAGACTTCCGAGTTGTGAGCTCCCCTTCCTGCCGATGTCTCTGACACCGGCGCAGTTGTCCACATCGCAGAAAATCTGGCAATGTACTAACTCTCTTTTAATTTCATGACTGAAGAAGGCCAACGCCAGGTCGTTCAGAATATATAGCACCGCCCGGAAAGACCCGCTCGGTAGTAGGAAGAGCTTCCCGTCCACAAATGCAACTGTGTACATGAGGCGATCGCAAGACTAGCATAACTTATTAGTTCGGACATGAGTGCCTTACGGCTGCGCTGTCTAGCCGCGTTTGCTGCTAGTCACCGTTGCTAGTCTCATACCGACACCGATAATGGTCAGGCCGTGCGAGTTGACCAAAGGGCCTTGGGTATATTCTCGTCTCTGCTTTGTTTAGTAACTTAGCAACCAGTCTGAGTATACGGAGGCACGTAACCGGACATTTCATCACACTCAATTTGCGAGAAATTAAGAATGCAGAGCTGGCATATTTCATAAGACCCGCCACGATCTCCCAAATCTATTGAGCTACTCCCGTGAAATACAGACGGACGCGCAATCCCTTAACAATCAACGTTGCCGTACTACAGCAGCGGCCACAGACTAATAACCCATGCTGTATTCACTTCGGTCCGGACTATTGACTCAGCTAGTCCGGAGACCAGCGTGAATGACGATTCTATCACCAACCCGAAGGAATCTGTTCGAAACAAACGTATAGAGGGCAAGTTCAGCGTGCGATCCATAAGCGGGGGAGATCTTCCTTAATCAGACCTAGTTGCTTAATATAATATGAGGCCCAGGCAGAACATCTAGTATTGTCCGCTATGCTGATCTTATGAGTCAACTTAAGTCGTGCTGGCCCTACGGAAAAAATCTCACCGGATTGCGATTCAGCACATTGATCTATAAGTATCGAGCAACGCCAAGCGAAGTATAGTGTCCGGTACCCAAAATTACGGAGAAGGCGACGGTCTTGGGCTATGTAAAGACTTTAAACGGTCAATAGGCTCTTGCTAGCCTCTCAGGTGACTTAGTCCTGTGCTCCAACCTGTAGACAGTCTATGAGACGATTTTGCAATCAGAACATACACGAGATTTAAAAACGTTAGAGGCTGATGATTGGTCACAGTCGATCCCGTTAAAAACAAAATACCGAAAAGATGGGTGTATGCCTACGGTCGAATGGTCTGACTTGCGGAAGAATCGTTTCCGCGTTAGGGAGCAAAAACCCGAAGCCCGAACTCGGAGTACCACACATAAGTACGGATGCGGGTTTCGCGTCCATCGGGCCGATAACCCCTTGATAGGGAAGTATTTTCTATTCAGAGACAGATCCTAACGATCATATTCTTGTAATGATGCATAGCTCGGTGACCGCATAAAAGATTGTTACTTATCACTTCGGTTTTCGGTCGATACCATGTGACCGCCTGGACATGATGGTCAACAACATAAGAACCCCACAGAATAAAAGGACATGTTCCTGTGTACTATAATGCACACGTTCTTGGTCACCTGTAATTATCTGTAGTATGGGGGTGCCGGTTATCCAAATATACGAAAAGCGCCTATTTAAAGCTTTAAGATAGCCTTCCTTAGTGTATCCTATACACTCAAGTTCACAGTAACGAGTTAGCGAAAATGTTATTGCAATACTGTAAGCCGAGAGTAAGACAGGTTGTCGCCGCTCCTAGGGGAGGGAGTGGTAAGGCGGCCGGTCTCTTCCAAGCTGAAGACCGGATACCTCCCGGTACGATAGCTTCCACCCTCAAGGCGGGAGAGCGCCAGGGCAGTGGGAAGGTATGCTATGATTCGAACGGGCTGGTAGCTAAGGGATATATGATCCAGTATGTATGACTCAGACACAGCCAGGCCATCTATTTAGGATAGACTTTACCCCAGCCCCTTCTATAGATTCATGTTCCTGGACTCTTTAAAGTAAATCCTAGGACATGTGTCTGCATTCTTTCTCGGCTCATGGTTAAGATACGCTATAAAATAAACTATGTCTCACGTGCTCGTACACGTGTGAATTTGTTCTGAGCGACCCTCCAGGTCTGACTCCTTTTTAATTTGATAAGACGCAGCATCTGCTTTCGCGCGTGCTGGTCGTGTAGGAAAATGTGATTGTGGCTAACTGGCACTAACTCACGAGGATTTTCTCCGGTGATTAACGGTCGCCCCATCCGTGAGGGAAAGAATCGGCATATGCCTTGAGGCGATCATTTCCCTCCTGAGTCCCAAGGACGATTTGCGAAGATTCGCCCCCCTATACGGTGTTTCTATTCGTTAGGTACTCGAAGCGTTCATGGTTCGCATATGGAATATTAGAAGTTTCCCGCTCCGAATCGGTCTCTCACCTCACTTACCTAAAAGGGTAAACAATATATTCCCACACCGAGTACGGGCGTCGAGTCCTCCACTGCGATGCGTCCAAGGACCGATTCTGATAAGCACTTTAGTCGGCGTTAAAAAGCCATTTACTAGGGCTGTATGGAGTATAACATCGAGTACGCTCATATCTCAGCTCAAAGGAGGTCGTTTAGGCAGACTGTAATCGGCTTCACTTTACGTTTGCCTTACAATTGGCCCTCCGTTGAAAATGCGCGTGGCAAAAACAAGGTTACAAATTCACAAGCCGAAAACATAGAGATGAAGTTTTGCTTCCCATCCGTTTATTGAGTTGTGATCTCTGGGGAATTCTCCTGGTAACTAAAATTTGGTATATCCCCTCCAGTCCTTAGTAGTCGCCGATAGAAACATAACTACCGGATCGTGTTTGTCTTTCTCGAACGACACGTGGGATTGATGACATAATTCCGTTGATTTACCTACCATAATAAAGGAGATTGGGCGATTAACGATATTTCGGGAGGGCGCTCATCAAGGACTAATAAAAATAAATGCGGGGTTGACTCCGCCCTCGGCCCTCCCGCATTCATCCGTCCAACCGGGCGTAAGCCCCTGCGATGGCGGCGTGACATAATCCGGTTACATGGGATGGTAGGGGGATACTTTCCATCGTGCTACATTCAAGCTAATTTCAACGTATGACTTCTGCTCCAGACGGGACGAAACCAGCTGCCTTGTTGTTAGGTACACGTGGTTCCCAACATGTTCCAGCAAAGACTCTATACTGTGACTATACACAAACCTGAGCTGTAATATCGGCTAAGGGTATCTGGACCATAAACTAGCACACCTTTCGGGATTAATACTTAAATGCGGATGAGCGTGTTCCTATGTGTCCCGATAATATAATCGTAAGTTACTGCGCAACGGTCCAAATTCAGTGGTTGCCCATGCAGGTCCACTCACTCGCACGCAGCAACGTACTATAATAGATTTAAACGGAGTCTCTTATAGTTCTGCCTCAGGCACCGCGTAGATTCTAGACGAAGTTGAAGACCGGGTATCCCTACGACCATCGTGCGAAACGTAGCTAGGGTCATCGACTGAAGTTGAAGGTATCCTACTGACAGTATCCGACCAGATCAATCCAGGTACTGATTGCCAATGGTCCGCCCTATCCTTCGTCACTCGATACCCCTAGGCAGGAGGGGCTACCCATAGAGATGTACGGTGAATGCTATGTGGAACCCATAGGCCACGCGTCGCATTGTGCCTACATCGGATACCTGTATTAAGAATCACTATATCGCTGACAGGAAACGGCTGTTTTCCGGCTGGTGATGTCGCCGCGCAGACTTTCTTATTAGTATAAGTACCCAACTTACGCAAGGCGTCCCTCTGGTACGGCAGCCGTAAGGTGGTCCTGAGCTAGAATCTTCGATGGGACGAGCTTATAGATAGGAAAGCTCGACTATAGCGGTTGTTGGCCACCTGATCGCAGTCGGGCCGCGTGTCGCCCGGGGGTGGCCTGCCGACGTCATCAACCCAAACAAGGAATGCGTAGACCGGGGTCGAATTCTATGGGGCGAGAAGGTGTATACTCACAGTACCATGAGCCTATGGCGATTAGGCGACGCCATTGGCATCCCGCAGCAGAAACTGATAATCCTGGAACGAATTGTCCTACGGTCTCATGACTGGGGTTGCGTGCGGGGCTCGGAGCAATAAGCGCCAAACCGACTAGATTGCGTGATTCAAGATGATAGACCGCTGTGCTATTTGTCGGCTCGTGGCAACCGCATTACTGATCGTGCCGCTTCGTTGGCCCTGACACGACTTGACGAGTACGTTACAGAGGAAAAGATGCTCATAGGTCCAGTCATATCCGGCATAGACGACAAGAAAAGCGGTGGGCGTTGAGATCAGAGGCTCGTTTGAATAGTTATACCCATAGCCCCACCAGAACGTGACACAGCTCAGATCGCCGTCCCGCGGCAGGATCCCGTAGTCAGCAACTGTAAGTGCGAGTCCCCTATCTAGGTAACTAGAAGAACTCCTCCCACCCGGGATCGATGAGACTACAGGCAATCAGTCTTTTAACCCGCTTAATTTATGTGCAAGCACTTCAGACTTGAACCTTTGCACTGTAATAGTTACTCGTAAGGGAGGACTCCGACAGATTGCGACGATTTTCCTGAATAGCACTGATACGCCAAAATAGTGATACAGCGGATCCTTCGTAAAAGTGAGTTGTTTATGGCGATGAGCCAGCAGCGAGGGGTAACGTAGTGTGCCAAGACGAATGAGGCGGATGTACGAGATCCATATGTTGCGTACATTGACCGGCACAGATTAGGTGTGATTTATGTTTTCTTTGCACAATCCCCACTCGCTCGATTTAATGCGACTCCTCCAACCCCCAATAGGGTGCAGAGTCTACGAATGGCGACGTGGGCGGCATCCCCTAAGTTTCGCTGACGCCTTAGACGTGCTTATGCCATCACCACTGCCTAGCCGCCTCCCAGCGTACGGAGATGAGCGACCTACACGTGCAACCCACTGAGCCGCGCTCGTTCATTCCGACAAGTTGAGGTGCCCTGAAATAGAAGGAAGTACCCTTCATTCCCATTGCTAGATGCCGAATCGCATGCATCTAGTCTAAGTGTTTAGGCTGCGTTATGGACTAAAAAA')


print(len(approxPatternMatch(2,'AAAAA','AACAAGCTGATAAACATTTAAAGAG')))


def approxPatternCount(d,shortText,longText):
    ans = len(approxPatternMatch(d,shortText,longText))
    print(ans)
    return ans

approxPatternCount(2,'AACTGA','TTCGTGCCTCTCGTAACACGCCCACGCACTACGGCAATCGATACTCGAGCACTACATCAGCGAAATTAAGGGACTGAGCCCCATCTTTTCTCGATCCCACCACGGGAACGTGACTTGGAACTGATTTCAAGGCACGTAGTCCAGCGGCCCAGTACGTGTCTGTTGCACCTCTTTTAGATAATCGCTAGGTTGACGCGTGGGAAAATCCTCCCAGCAAGAAGAAATCGGTTCCCTGGATGAAGTGGGAGCGCGGTTCGCACCGTCCCCTAGTATGCACAGTCACAACCCAGCCAGTGCAGGACATGAGGCTACTACCTAAACTTACCCGCGGACCCCGGCCCCTTCAAAGAACTAGGTTAACCGACTCGGCCGGT')

def approxPatternMatch(d,shortText,longText):
    matches = []
    matchDict = {}
    for i in range(len(longText) - len(shortText) + 1):
        if hammingDist(shortText,longText[i:i+len(shortText)]) <= d:
            matches.append(i)
            
            if longText[i:i+len(shortText)] not in matchDict.keys():
                matchDict[longText[i:i+len(shortText)]] = [i]
            else:
                matchDict[longText[i:i+len(shortText)]].append(i)
            
    #print(matchDict)
    
    mymax = 0
    for i in matchDict.keys():
        matchDict[i] = len(matchDict[i])
        if matchDict[i] > mymax:
            mymax = matchDict[i]
            
    mykeys = [i for i in matchDict.keys() if mymax == matchDict[i]]
    print(mykeys)
    
    return mykeys

approxPatternMatch(2,'AACTGA','TTCGTGCCTCTCGTAACACGCCCACGCACTACGGCAATCGATACTCGAGCACTACATCAGCGAAATTAAGGGACTGAGCCCCATCTTTTCTCGATCCCACCACGGGAACGTGACTTGGAACTGATTTCAAGGCACGTAGTCCAGCGGCCCAGTACGTGTCTGTTGCACCTCTTTTAGATAATCGCTAGGTTGACGCGTGGGAAAATCCTCCCAGCAAGAAGAAATCGGTTCCCTGGATGAAGTGGGAGCGCGGTTCGCACCGTCCCCTAGTATGCACAGTCACAACCCAGCCAGTGCAGGACATGAGGCTACTACCTAAACTTACCCGCGGACCCCGGCCCCTTCAAAGAACTAGGTTAACCGACTCGGCCGGT')

def approxPatternMatch2(d,k,longText):
    matches = []
    matchDict = {}
    
    matrixmatches = []
    
    for i in range(len(longText) - k + 1):
        matrixmatches.append([])
        for j in range(i,len(longText) - k + 1):
            if (hammingDist(longText[j:j+k],longText[i:i+k]) <= d ): #& (i!=j):
                matrixmatches[-1].append(longText[j:j+k])
                
                if longText[i:i+k] not in matchDict.keys():
                    matchDict[longText[i:i+k]] = [longText[j:j+k]]
                else:
                    matchDict[longText[i:i+k]].append(longText[j:j+k])
            
    #print(matchDict)
    
    mymax = 0
    bestmatches = []
    for i in range(len(matrixmatches)):
        
        matrixmatches[i] = list(set(matrixmatches[i]))
        
        if len(matrixmatches[i]) > mymax:
            mymax = len(matrixmatches[i])
            bestmatches = matrixmatches[i]
    print(' '.join(bestmatches))
    
    mymax = 0
    for i in matchDict.keys():
        #matchDict[i] = len(matchDict[i])
        if len(matchDict[i]) > mymax:
            mymax = len(matchDict[i])
            
    mykeys = [i for i in matchDict.keys() if mymax == len(matchDict[i])]
    #print(matchDict)
    #print(mykeys,mymax,[matchDict[i] for i in mykeys])
    
    #print(' '.join(list(set([i for j in mykeys for i in matchDict[j]]))))
    #print(' '.join([matchDict[i] for i in mykeys][0]))
    
    return [matchDict[i] for i in mykeys]
'GCATATTGGGCGGGCGGCATGCATATTGGCATATTGGGCTCAGGGCGTCAGATTGGGCGGGCGGCATATTGGGCGCATGGCGCATGGCGTCAGTCAGATTGTCAGGGCGGCATATTGTCAGTCAGGCATATTGGGCGGCGGCTCAGGGCGTCAGGCATGGCGATTGGCATTCAGATTGGGCGGCGGCTCAGGGCGCATGGCGGCGGGCGGGCGGCATGGCGGCATGGCGGGCGATTGGGCGGCATATTGGGCGCATGCATATTGGCATGGCGGGCTCAGGGCGGCATTCAGGCATGGCGTCAGGCATTCAGGGCGATTGATTGGGCGGCATTGATTG'

approxPatternMatch2(1,3,'AAGAG')


"""
ImmediateNeighbors(Pattern)
        Neighborhood ← the set consisting of single string Pattern
        for i = 1 to |Pattern|
            symbol ← i-th nucleotide of Pattern
            for each nucleotide x different from symbol
                Neighbor ← Pattern with the i-th nucleotide substituted by x
                add Neighbor to Neighborhood
        return Neighborhood
"""

def immediateNeighbors(text):
    
    nucleotides = set(['A','T','G','C'])
    
    Neighborhood = [text]
    for i in range(len(text)):
        symbol = text[i]
        
        
        
        for x in list(nucleotides-set([symbol])):
            neighbor = list(text)
            neighbor[i] = x
            neighbor = ''.join(neighbor)
            Neighborhood.append(neighbor)
            
    return Neighborhood


immediateNeighbors('AA')

"""
Neighbors(Pattern, d)
        if d = 0
            return {Pattern}
        if |Pattern| = 1 
            return {A, C, G, T}
        Neighborhood ← an empty set
        SuffixNeighbors ← Neighbors(Suffix(Pattern), d)
        for each string Text from SuffixNeighbors
            if HammingDistance(Suffix(Pattern), Text) < d
                for each nucleotide x
                    add x • Text to Neighborhood
            else
                add FirstSymbol(Pattern) • Text to Neighborhood
        return Neighborhood
    
    """

def suffix(text):
    return text[1:]

def neighbors(text,d):
    
    if d == 0:
        return {text}
    if len(text) == 1:
        return {'A','C','T','G'}
    Neighborhood = []
    SuffixNeighbors = neighbors(suffix(text), d)
    for text2 in SuffixNeighbors:
        if hammingDist(suffix(text), text2) < d:
            for x in ['A','T','G','C']:
                Neighborhood.append(x+text2)
        else:
            Neighborhood.append(text[0]+text2)
    return Neighborhood

    
"""
FrequentWordsWithMismatches(Text, k, d)
    Patterns ← an array of strings of length 0
    freqMap ← empty map
    n ← |Text|
    for i ← 0 to n - k
        Pattern ← Text(i, k)
        neighborhood ← Neighbors(Pattern, d)
        for j ← 0 to |neighborhood| - 1
            neighbor ← neighborhood[j]
            if freqMap[neighbor] doesn't exist
                freqMap[neighbor] ← 1
            else
                freqMap[neighbor] ← freqMap[neighbor] + 1
    m ← MaxMap(freqMap)
    for every key Pattern in freqMap
        if freqMap[Pattern] = m
            append Pattern to Patterns
    return Patterns
"""
def maxMap(freqMap):
    maxest = 0
    for value in freqMap.values():
        if value > maxest:
            #print(value)
            maxest = value
    return maxest

def frequentWordsWithMismatches(text,k,d):
    patterns = []
    freqMap = {}
    n = len(text)
    for i in range(n-k+1):
        pattern = text[i:i+k]
        neighborhood = neighbors(pattern, d)
        for j in range(len(neighborhood)):
            neighbor = neighborhood[j]
            if neighbor not in freqMap.keys():
                freqMap[neighbor] = 1
            else:
                freqMap[neighbor] = 1 + freqMap[neighbor]
                
    m = maxMap(freqMap)
    print(freqMap)
    print(m)
    for pattern in freqMap.keys():
        if freqMap[pattern] == m:
            patterns.append(pattern)
    return patterns









