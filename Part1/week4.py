#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug 23 20:44:16 2022

@author: brian
"""
import random
import pandas as pd
import numpy as np
from multiprocessing import Pool



"""
RandomizedMotifSearch(Dna, k, t)
    randomly select k-mers Motifs = (Motif1, …, Motift) in each string from Dna
    BestMotifs ← Motifs
    while forever
        Profile ← Profile(Motifs)
        Motifs ← Motifs(Profile, Dna)
        if Score(Motifs) < Score(BestMotifs)
            BestMotifs ← Motifs
        else
            return BestMotifs
"""

def mostProb(profile,text):
    mymax = 0
    
    #take a guess for best
    best = ''.join(profile.transpose().idxmax())
    
    for i in range(len(text)-len(profile)+1):
        #print(prob(profile,text[i:i+len(profile)]))
        if mymax < prob(profile,text[i:i+len(profile)]):
            best = text[i:i+len(profile)]
            mymax = prob(profile,text[i:i+len(profile)])
            #print(best,mymax,prob(profile,text[i:i+len(profile)]))
        #print(prob(profile,text[i:i+len(profile)]))
    return best

def prob(df,motif):
    myprob = 1
    for i in range(len(df)):
        #print(i)
        myprob = myprob*df.iloc[i][motif[i]]
    return myprob

def funcMotifs(myprofile,Dna):
    best = []
    
    for text in Dna:
        #print(myprofile,text)
        best.append(mostProb(myprofile,text))
    return best

def score_old(df,motifs):
    myscore = 0
    for motif in motifs:
        myscore = myscore+ prob(df,motif)
    #myscore = prob(df,motifs)
    #print(myscore)
    return myscore

def score(df):
    myscore = df.apply(lambda x: -x*np.log(x)/np.log(2)).fillna(0).mean().sum()
    #print(myscore)
    return myscore

def profilefunc(motifs):
    
    prof = {}
    factor = 1/(len(motifs)+4)
    for nuc in ['A','G','C','T']:
        prof[nuc] = [factor for i in motifs[0]]
        
    for i in range(len(motifs[0])):
        for j in range(len(motifs)):
            #print(i)
            #print(motifs[j])
            #print(motifs[j])
            #print(i,j,motifs[j][i])
            prof[motifs[j][i]][i] = prof[motifs[j][i]][i]+factor
            
    return pd.DataFrame(prof)

def profilefunc_multi(motifs_multi):
    dfs = []
    prof = {}
    for motifs in motifs_multi:
        for nuc in ['A','G','C','T']:
            prof[nuc] = [0 for i in motifs[0]]
            
        for i in range(len(motifs[0])):
            for j in range(len(motifs)):
                #print(i)
                #print(motifs[j])
                #print(motifs[j])
                #print(i,j,motifs[j][i])
                prof[motifs[j][i]][i] = prof[motifs[j][i]][i]+1/len(motifs)
                
        dfs.append( pd.DataFrame(prof))
    df_zero = dfs[0]*0
    
    df_comb = df_zero.copy()
    for df in dfs:
        df_comb = df_comb+df
    return df_comb/len(dfs)
    

def randomizedMotifSearch(k,t,Dna_in):
    nucs = ['A','G','C','T']
    
    Dna = Dna_in.split()
    n = len(Dna[0])
    #myrandint = random.randint(0,n-k)
    randomselect = [random.randint(0,n-k) for i in range(t)]
    #randomselect = [myrandint for i in range(t)]
    Motifs = [i[j:j+k] for i,j in zip(Dna,randomselect)]
    Motifs = [''.join([nucs[ random.randint(0,3)] for i in motif]) for motif in Motifs]
    BestMotifs = Motifs[:]
    
    
    
    while True:
    #for blah in range(5000):
        #print(Motifs)
        myprofile = profilefunc(Motifs)
        Motifs = funcMotifs(myprofile,Dna)[:]
        
        #print(Motifs)
        #Motifs = 'TCTCGGGG CCAAGGTG TACAGGCG TTCAGGTG TCCACGTG'.split()
        
        #if score(myprofile,Motifs) > score(myprofile,BestMotifs):
        if score(profilefunc(Motifs)) < score(profilefunc(BestMotifs)):
            BestMotifs = Motifs[:]
        else:
            return BestMotifs
        
def multirun(args):
    k,t,Dna_in,iterations = args
    motifs = []
    
    bestai = []
    bestscore = 2
    
    for it in range(iterations):
        if (it %10) == 0:
            print(it)
        motifs.append(randomizedMotifSearch(k,t,Dna_in))
        
        myscore = score(profilefunc(motifs[-1]))
        if myscore < bestscore:
            bestscore = myscore
            bestai = motifs[-1]
            print(bestscore,' '.join(bestai))
        
    
    
    return bestai
    #print(funcMotifs(profilefunc(motifs)))
    
def pickbest(motifs):
    
    bestai = []
    bestscore = 2
    
    for motif in motifs:
        
        
        myscore = score(profilefunc(motif))
        if myscore < bestscore:
            bestscore = myscore
            bestai = motif
            print(bestscore,' '.join(bestai))
        
    
    
    return bestai
    
        
#%%





if __name__ == '__main__':
    #Stringy = """CGCCCCTCTCGGGGGTGTTCAGTAAACGGCCA GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG TAGTACCGAGACCGAAAGAAGTATACAGGCGT TAGATCAAGTTTCAGGTGCACGTCGGTGAACC AATCCACCAGCTCCACGTGCAATGTTGGCCTA"""
    Stringy = """GCTCTGAAACGAAATAAACGTCATCCTGCGAATCAACAGCTTTTCGGGCGCCTTCACAAGGAAGCGCAGAGGACCACCTCTAGATCTGTTCAATCACCGAGAGGGAGAGGCTTGTCAGGTAAGTACTGCTACCAGCCCTCAGGCTAGTTAGTATCAAACAAACATACTCTGCTCTGAAACGAAAT AAACGTCATCCTGCGAATCAACAGCTTTTCGGGCGCCTTCACAAGGAAGCGCAGAGGACCACCTCTAGATCTGTTCAATCACCGAGAGGGAGAGGCTTGTCAGGTAAGTACTGCTACCAGCCCTCAGGCTAGTTAGTATCAAACAAACATACTCTGCTCTGGTCCGAAGTGGTCGAAAACGAAAT ACGCAGGCCTGAAGTAAGTACATGGTTCGCTTTGACACTGAAAGCAGTTTTCGGGACAACTAAGCTTCAAGTGAGGCGTCTAGCGCATTACTGACTGTGTTAGTGTTCGCTGGCTTGGTTAGAAAGCTGCTTAGCTGATCTACGGTTCGAGTTACCGTGCCCTTAGAGTGGTCGAGAGGCTCGCG CGTCTTATCGGACCCGAATTCTGCCTCCTCCGACGTGCCCCATAGGAAGCCGGCCGAAGTTGAGTCTAGTCAGGTCGACAGAATGCTGCTCCTGGCTGTGTCTGACGCCGAGTCAACCCTAATGTATTAAAACTGCATTTCTAATGACTCACTATGGCTCGAGCGACGGAATGTGGCACAAACAG CTAACAATCAGAGTTGTTAAGAAAGCCATAGGATAAGAGTGGTCGATCGAGGCGAATTCCTGGCAAGCTGTCGGGCATGTCAGGGGGTACTTTCAGACCCTAAGGTCAAATAAATAATCGTAAACATGTTGTCAGGCAGTGGTGATGTGGGGGCCGTGCAAAGCGGAGCATACGGCGTTCTTTTC AGGTCAATGTCAAAGGGTCAAATCGATTGTGGAAGTCGATGGGCACATGGGATATAATTGTACCTCCCGGCATTCCATAGGGTAGTGAGTGGTCGATATTCGGGGGCGGCAAAGGCAGGTACAGAGAGATTTAACGCCGACTCGGGTCAAGGCCACTACGAAGCTTAGATACGGGGCTGGCGTAA CTATAAGAAGAAGAGGGATCTTTTCACATTTTGTTACACTGACTGCAGCTTGCGTTGCATTTGACACTGGCACATTCGGGCTGACCGATCCGGTGAGTTGCGAGATACTATGTGTAGGGTCTAACCTGGTCGAATAGGGCTCAGCCAGTAGACCAAGACCTTCGTGTTGGCACGTAGGAATATCT TGCATTAGGTTCACCGTATTTGGGATGTGGCGCGTCGTATGGGCTCCCTCCCAGAACCACCTCAAAGGGCCAGAATATAAAGCGTTCTGCTAAGAAGGGCACTATGGTCTCTCGTGGTCGACAGCTTTGGAAGATCTATGATAGCACAACATACGGCCGTGATCTAGCGCAAATCCTGGTTCTTT TCAACCAGCGTCGTCTCTAGCTCTTCGATTGCCCTCATGCGGTCAACGTCCACCGGCCGCTGAGACCAATCGGCAACGAACCAAAGACCGGACCCAACACGACCGACCTGCAGCATCAACGGTCTAGGCGGGTCGAGTACGTGCTGCGGGGCAGGACTTGTCTCTCGAACTACTCAACAAGCGTA TATATTTGGGACGAAGTCGATCACGGAACACATGCATCGCGTCTAGAGTGGTGCTACGAGGCTGGAATGGCGGGAACGAGTTATATATCACTCCGAACCCTTGCACCCGATATAGTTACTAAACGCTAGTCCATGTCGTGCCCGGGGCGGTTGCGTGGCGGCGCGGGCACATCGGGAGGTTCAAG TCGGTTTCACTATACGGCTTGAAGATCGTGTTGGATGTCTAGAGTCAACGAACAACCATTATAATGCTGGGGGACGACCCGTCGCGGTAACTAGGGACTGGGAAGTACCACTCACAAACGCTTCGAATGATTCCGCAATCCAAAGCAATACTCGGTGCCAGTGGATATTATGGTCTGTTGGATGG GGGAGGCGGATGGCTGGGCTAAAGCTCTACGGAGAAACATACGCACTAGTAAGGGTTGGAAGCATAGCATGTAGCCGCCGCGCCCGTGAGGTCTAGAGTGCCAGACGCGAAGTTCAGGGAAAAGGGAAATGAGTATTTCGACCGCCTCAGCACGGTTGATATCGAAAGCAGATGAGGAGGCAGTA TGTTGTCCGTCTAAAGTCCGCAGGTCTAGACAAACACTAGCAGTCGTTTTAATGAGGCAAGATTGACCAGAGTCTTCCGTGGTCGACCCCCCTCGTGGAAAAGTCTAATGCGATTCGCAGTCAAGTCCTTTATGGACTGATTACACATTAGGCCTCTCAAGACCTCCTGTCCACGAGTACCCGTC GACTTGGTGGAGCAGTTTGTGAAGCGCCCCGGCTCTACCAAAGCTAGTGTGATATTCGTTGGAGAACCCAACTTGAGTCTAGAGGAATCGACGTTAGAACACCATATCCGGAAATTCTAAGGTCTTGCGCTCTTACTATTTTCAGATATTGATCTCCCGTCTTAAACACATATTCCATGTTGCTA TGCTCCCATACTCGCGTAGGCATCGGTCATGCGGATACTTTTGACTTTGAGTCTTCCTTTTTTCGATGGTACAGGGAATAAGAGTCCTTAGTGGTCGACTGAGTCGCTCAGTGACACCATTGCAGAGAATATATCGTGTGATCGGAATTTCTGAGGCACCAGGAGTAACGCGCTAGGGCGCGGCG GGAGGTCAACCCATGCAGGTCACAAAGGGACAAGATTTGCCGAGTCTAGAAATGTCGATTAATAGGGAAGCCCGAGGGTTCATGCACCCTGATATGCCCTGTGATTTTTTATAGTCGTAAGCTATCACCGCGACCTCCGCGTGGATCAGCTCTTAGGCGATGACTCTATAGAGCCCAGGTTCATC CCCATCAGCATTTGGTGTCTTGCACAGTATCTCTAGAGTGGTCATATCTGAGTGGCCTCCCCTTACGTATAGAATCGTCACTCCTCCCGTAACGAGTGAGGGAGACACGTTTGTCACGAACCTACTCGTATCACTCTGAGCATAACTGTGTGTGATTATGGGTTTGGTAGCCGCTTCGGGGAAGG GTGAAGTGCCTGTGGCATCAATTTCGTGTGGCCCACAATTAGCCTACTGTTTGAGAGGCTTGTACGTCTACCTTGGTCGAACATCGCCCAAAGTAGAAAGGTTACAAGGGCAACCTATGCGAGTTCGATGTACACTAATCGTCAAGCAACATCAGTGCGTAGGCAACGGGCCGACTGATACGATG CCAACGCTAGAGTGGTCGCTTGAAGGAAGCACCCAAATTATACACCTCACGTCACGTATTCTCACCACGTGCTTGAGCAACAATAGGTTATTGTCACCTTGTCGCTCGGTACAACGAATACGACCCCTACTTTTACCCAGTGACGCGAGAATATGATCAGTACTTTCACCCTTTACGTGGGCCGT GCTGAAATTCTCAACTCTGTGATTTTTTAGACTGCATCGCATTCTTGTGCGATGCCATGTCATCTCTATGATTCGGGGCCACCACGGGGATTGAAAAATTTCGGGATTCTGGGAGATTCAGCCGACCGGGGAAGAGTTTGGTATACCAGGAGTCCGCGATGAGATGTCTAGAGTGGGGCAGGGAA"""

    print('run randomized test')
    #a = multirun(8,5,Stringy)
    #print(a)
    
    iterations = 8
    #argruns = [(8,5,Stringy,int(1000/iterations)) for i in range(iterations)]
    argruns = [(15,20,Stringy,int(100/iterations)) for i in range(iterations)]
    with Pool(iterations) as p:
        answer = p.map(multirun, argruns)
        
    print(' '.join(pickbest(answer)))

#print('\n'.join(funcMotifs(profilefunc_multi(a),Stringy.split())))

#print(randomizedMotifSearch(8,5,Stringy))
#%%
#Stringy = """GTTTAGCGGCAGAAGGGCGAACACGACGAAGTCTTTCTAGGATCGGGTAAACGGCCCCGTGTACGACATGCACCATTGAGCTTCTCAAGTCGGCTGACACATGGTACCCATATGATACACAACAAAAGGTCCGGATAATCGCCACCCTAGATGCAGTGTCCGTTTAGCGGCAGAAG GGCGAACACGACGAAGTCTTTCTAGGATCGGGTAAACGGCCCCGTGTCCAACCGCTTCTCCAACGACATGCACCATTGAGCTTCTCAAGTCGGCTGACACATGGTACCCATATGATACACAACAAAAGGTCCGGATAATCGCCACCCTAGATGCAGTGTCCGTTTAGCGGCAGAAG GTTGTTCATTGGTGAGCCCCTCTATACCACCCGCGGCGCTCAGCATCCTGACCTACATCCACTTACTCCAGCCCCCCGAAATGGTAGCGGGCCAGCTAATCAGTCCCAGGGGAGACTCCACAGACTTTCACTTGCATTGTCTTGAATTATGTAAATCCTCGCCTGCCCCGAAGTTT ACTAACCGCGCTTCAGATTATTTCATACAATAGCAGTCATCCATCGAATCAGTGGATTTATCCGCCTGGTGTTTAATACTTAACCGCTCCGGTATCTATGACAAAGCCCTTGTGAAAGTCCACAGGGGCTTCTCTGATATTCAGGTAACATAACGAGGGGGATATTAGGCTATTTA AACGTTAGGTTTCAAACGCCAGGACCGACCGCGGTTTGAACTTGTGATCCTCGAGCCACTGCTCTTCGTACAGCCGATCTATACCGAGTCTACGGGGCATGCGTTACAGGGAACCAGGATTAACATGATTCGGTAAGGTGCCAGCCCCTTCTCCACATAGGAGAAAGCCGTCAGTC GGGGCCTAACGTCATAAAAAGGAACCGTCGGCAAAATTGACATGATCCATATGCGCGCTGCAGATCTAATTGCCCCAACAAATTTACATTGGTAGGAAGGCCATAGTAGCCGGAAGCAGCAGATACTACGTGACCAACAGATACCCTACCAGTCTCTTCTCCAATGCTTTGAACGT AACTATCATTAAGTACGACAGATAGTCCTCTTCTTAGAATACAACATTTCACTAGTACCGTACTGATAAACCGAGGTAGAGGAAGCAAAGGTGGTTCCAGGGGCTTCTGTGCTACAACGACTTGGCCTGACATGTTTAGGGCGTAAAGTTTATGCAGTTCCTCTGTCACCAACTTG TGGCGTAACGCAAGGCATGGTTCGCGCTATTTAGAGTGATGTTGGGGCTTCTCCATTACTGATCGGGACTACACGACAAATCCGTGGGACCCCTGCGTAGAACCGTGAAAATTCCTCGACTTTAAGTGCAAACGTTGGAAGGAGCTGGCACCCCGTCACCAGTACGGATCGTCCAA GCACGGTACCGCGGTACAAAGCCGAGCTCACCTGTGAGACCGATCATCCGGCAGCTGAATTCTTTAAGGACACCTCGTGTTTCATCGATAAGTAATTCAGGCGACCGACGATAGCGGCCGTCGAGATCTTGTAGAACCAGGTCGTTCTCCAAGGCCGGTGCCCCGGCTTTAGCAGG GCCGAGGACGATGACGCAGAATAGTTTTGGTTGCCAAAAAAAGGGCTTTGGCCGCTCATGGTTTTCCCCTTACCTTGAAGTACGCACTCACGGGCGTTGGAGGCTCATCCCCAGGTAGTTCTCCAAACCCGGGGTCCTATGACCAGAGGAGTTAACAGGCTACGGAGCGCGAGACG CCTGCGGGCTTCTCCAGGCCTTTCACACTCCCCCACTTCTGGTAGGGGCATGAATGTCGCTGCAGGAAACGTCCATAGATCAAGGACCGCGAGGGGATGTGGCCGTGCCGTGTAGCAGTGCGGTCAATCTCAACGGACGCTATGTCGCGAAGAACGACCGAGTTAGTTCCCTGACT ATCTTGGTAAATCCAGCCAGATAACAGGCAGATTGCTCGGGTAGTGTAATGATATTTCACAAAATTCCGCGGTTAGACCAAGTCGTAGCCCAGGGTAGTCTCCATGCACCCACTGGGTATATGTCTAGCATTAACCAATTTAGCCCGACCAGGTCCACGCCCTCACCGGTGAGGTG CAATAGCATGAAAATACGACCCTAGTATAATTCACACCGACAGATTCAAAAGGGAGTCGTGTGCCTCTTTCTCTGGATTAGAAGAAAAATTGTTGCAGAGTAATAATAATTTTCTTGCGTGTACATCGAAGCCAGGGGCTTCGAGAGCCCTACGGAATAAGTAAAGCATGGACACT TGTAGTCTCTTGACGCCATATTAGCTCCACGCAGGAGCACATCTACAACAACGCTTGTCCGAATATACGTGACGGACCTTACCCTTTAAATCAAGCGCCGTCGGCTTCTCCACTGGGATGCCTGAACTGAGGAGCGTAAGTGTTAAACCCAATAGTACCGGTTCCAGCGCGGTAGC TGTGTACTCAGGGGGTGCGTATTCTTAAGACTAAGCCCCATGTGAGTGAAACTCAATACCCTGTCCGCTTTTGACATTACGTCCGATTGTCGTGTGGGCCCAATTGCTTCTCCAGCCTCTTATGGAAAGGCAAACACTGTCTTCCTGCGGGCTTAGCGAGCTTATCGAACCGACAA TCGTTTAAGAACGTTTTGCCTGGCTGATGAGTATGTATATAGTTTGTGAAGGTTTCGCTGGCCATTCTTCCTTAAGCCAGGGGCTTGGACAGTGGGCACGGGCTCGTCTTAAAAGCTTATTGACATGCCAAGGTAGTTGTGCGTTATCTCCTCCAATGGGCCCACTATCCCCTCAA ACACTACAACCTCCGCCCGTTACTGAAGTAGACTTGTCGTGTGTATAGTGTCGGGACTTTGTCTGGCAATCCAGATGACCCACATCCCCTCGTGACCATAACAGATTCGAGAGCGGAAGGACCCAGGCACACTGCCAGGGGCACGTCCATGTACCGATTAAGCTACCGCTTACCGG ATATATGCCGCTGACATAAGTGCATAGCACTAGGCCGTGAAATAGCCGCGCGACCGACTAGAATGACCCGTTTCTTTTCTAATGAATCAGAAGCTTAAATCTTTCCCAGGGAAATCTCCACGGGATATTGCAGCCATCCTAACTCCCTCCGAGTTTACTGATGTTATCGAGCTACT CCACTCGTATGCCATCTTTACTGCTCCGATATAAGACGGCCGTTCAAATTGGTGGCGTCTTTAAGTTACTGACGGCCCTTCTGGCCCTGTATCCGTAGAACTACTGATAGGGGCTTCTCCCCCATTGCATGATCTTCGCCGGGGAGCTCTTAGGGTCCGTTTCTGGCTCATACTGT ATAGACTACAGAATCTTCGCTATAACCCCACGTAGTAACGGCCTCCTAATCTGTAAATACCGCCTCAAGGACAGCCCCAGGGGCTGTACCAACCTAACGAACGGTTTGAAGGTCGTACGCCGGCACTAGAGCTCAAACTCCACCCTGGCAAACATTACTATGCGTGGAGCCCGGTG"""
#Stringy = """GCTGGGGAGCCTTTCTTGGGATCTGCTGACCATCTAGCTTTCAGAAAACCTTTTTGGTGTCTGTCTCCCGTAGACCGTCTTTGGTGGTCGGCTTCCGTAGCATCCAGGCGGATGCGCCGTCAACTGGCGACTACTAATACCAGTATCTATCGGCTGGGGAGCCTTTC TTGGGATCTGCTGACCATCTAGCTTTCAGAAAACCTTTTTGGTGTCTGTCTCCCGTAGACCGTCTTTGGTGGTCGGCTTCCGTAGCATCCAGGCGGATGCGCCGTCAACGACCTGGACCGGTTTTGGCGACTACTAATACCAGTATCTATCGGCTGGGGAGCCTTTC TAAGTCTAACTATCGGTGACCGGTTACACCGAGTAATCTTGTAGAGCGGTACATGCTAATCAAGTGCCTTACGATAATCCGTCTCTCTGTGCGATCCTATCTTAGTGATTGAGGGCCGTGTTTGCATGCTCAAATTTGTCGTAGAGCAGTAGTCGAGAAAGGTAGGA AAACTCGGACCCCGGCCACCGCTTTTAACAATGTCCGAGGACTACCCTTGCACCCCGGTAACCCCTCATACGGTGAGTAAAGATTGATCTTTCACCGCCAGACGGTGACGCCTTTAAGGTGATTTCGACGACGCGTATAAACCCAACCAGATGCCTGCAGGAACGCG ACCTAATATTGTTATCCACATGTGGCAACTGATCACAGACGTACGCGAATAATCACGCTTACTGCCACCCGTCCATACCTCGAAAGGACGGTGACCGGCCGAGTCGAGGAACAAGCTTCGGGAGCATTGACTCCAACCCCCCAGTGCCAAGGGTTATGATTGTTTTG CAGTACGCGTTACGATTCGGCCTGTGGACGGTGAAGTGTTTTATCAGGCACTACGTTCGAGCTCTTCAATCCCATACCGGTTACTGGACTGCCCGATACCCGTTGTGCTAGGGGCATGAAAAGCATCGTGCTGAGGCTTGTGAAACCCGTGGACGGCAAAGACTCCT AGAAGCGGTCCTTTGTGTCGAACCCATCAAGCCTAGGACTAGGCCATCTAGCCGTCCGCATGGCCCATGCCCTCATGAGGCTCTATGGGAATTGATAGACCACATCTAGATTGACGGACGGTGACCCTGTTCTCACCGATTTTTGTTTTTGAATTAATTTGCACCGA CTGGAGTGGTGGTGATTCCTACCATGGGTGCAATCAAACTATTAAAATTGTGCTCGACAAGTGAAGCCCAGTCCTACTCTCGGTCGTAAGCCGAGCAGAACCCAGAAATTAGGACACCCCATAGTGGCACTTGCGGGCTTACCAACTTAGACGGTACGCGGTTTAGC CCTTATTATCAAGCACCCGAGGCCAGAGCTGTAACAACTGGGACGGTCGACGGTTTACCCCCGGCGGAGAGCTCCCGCCACAAAAGTTACCCCTCACAAGCGCCGCGTGCTTGGACCGGTTCCATGAGATGCCTCTCTAAACTTAGGAAAACTTAATGTAGTTATCC ACTGCAAGGGTTCAGAACTAAAGTCGCTCCTTCTTATTCATAGCGGTTCGGAGTAGGATTGTAGCATAAGTTCTAGTACAAACGAGGCATGTGGGGGCAACGCCCAGATGATGACGTTATCTAGACGTAGATTTGACGACTACCGGTTTAGTGGACGCTAGCGGCGG GCTACCCATCACACGAAGAGCACAAACCGTGGTAAATGTAAGCGTATAGCTCGTGTTAGTTTAAGCCATACCGTGTTTTTTACGCGCAAGCGATATGTACGACTGTAAGTAAAATGAGGGATGCGTCTAAAACCATAGTCTTCGCCAGGCACGTGACCGGTTTATAA TACTTTTGTTAATATAAGACGGGTGCCGGTTTTGGGTTGTGGTTCATCCATAAGTCCCAGAATATCGCGATTTGCACTCTTTAGGGATCTGAAGACTGGGCGGAAATCTGCAGCTTCTTAAATAAGACACCAGACACTAAAGTATACGAGGCGCAATAGGGGGCCTC GACAGAAAATCTTGGCTGTGACGTGGACCAAGACCGGTTTAATGCTGTGTAGTTCGCTAAAGTTCAGGTTTAATGCAAGATGTTACATAGTCAGGCTGAAAAAGGTCCGTGGCCTGCGACTAATAGTTCTGCTGTATCCACTAAACAGTTGCTACGCGCCGGAGTAA CGACCGAGCCAGGCTATCGAGTCGTGCTCTGATGAAAACTCAGCGATGAGGATTGATCGACTGGATTCGTTGCGCGTACGTGTAGCGGGGCTTGCCAGGTCGGCTTTAGGAGGACACGGTGACCGGTACCAAACCCACCGAATAATATCCAACTGATCTGCACATTC GCTTTCGGAACGCGAAAATTCGGCACAACAAACGACATCGTATCGATTTGTTCAATCAGGCGTTAAAGGACGGTGACCGTAATGCTTACTTAAAGGCAACTAACCAGAAGCTGTACCTGCTAACGGAAAACCCTGCGTGGGCTTCGACTATAAGGGACCGGCCGCGT CCTCAGGGTGTCCTAAGGTCGCCACCGGACGTACACCGGTTTGGCCATAAAAATCTGGCAGTCTACGCCGTCCACCTAGACGACCCACACTGACGAGTTTAGTTTCGGTCGCCAAAGAACCCCTCTCGCAGGGGTCCGTAGACTGAGGCCGAGCTGGCCACAAGACC CCCTGTAACTCTAAAGCCTTCGCAGCTATACGCGATAAACTATAACGGTAGAGGCGTTAAGCCACGTTCTCCACAAATACCGAATCAAATAATTCCGATCATCCGGGTGCCCGTTTCGTAGATACCTTTGTCCTGACGCGATAATGACCGGTTTTGGTGGAAACCAC AGAACACTGGGACTTCCTTGGGATCCACTGTCTACGGTCCCTATAGCTAGGTGACCGGTTTAATAATTACCCGGGTATGCAAATCTGTATTTTTACTAGTCCCACCATTATCCTCGTGGACGTAGAGGTCTCAGTCATACAATCACGTTCTGCCAGCGATCCATGCC TGCCGCCCTTCAGTTGGAGGCCGGGGACAAGAAGCGGGACCTGTTGTTGTCTTGGAGACGCTAGGCGACCAAAAGATGCCTTCAGAACGTGGTGGACGGTGGATGGTTTCGTAAGTGCTGCCCTGCTGGAGGCCAAGTGCGTGAGGCAACGTGACGATCAATCGCAG TGGATACCACTTCCACCAGAAGATCCGGTTCATCCCATACGAATACATTATAGTCGGACGCTGATGCGGAGACATTAGTACCTATAGACGGCTCCCGGTTTACGCTGGAACGAATGTTATCCGCCTCTACTAGAACTCCACGGCTTAAGGCCGCAAGACAGATGGAA"""
#print(' '.join(multirun(15,20,Stringy)))








#%%













